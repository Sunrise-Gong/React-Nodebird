{"ast":null,"code":"import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects'; //import shortId from 'shortid';\n\nimport axios from 'axios';\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, generateDummyPost } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- LOAD_POST\n// function loadPostAPI(data) {\n//     return axios.get('/api/posts', data);\n// }\n\nfunction* loadPosts() {\n  try {\n    //const result = yield call(loadPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: generateDummyPost(10)\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["all","takeLatest","fork","put","delay","call","axios","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","generateDummyPost","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPosts","type","data","err","response","watchLoadPosts","addPostAPI","post","content","addPost","action","result","id","watchAddPost","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\n//import shortId from 'shortid';\nimport axios from 'axios';\n\nimport {\n    LOAD_POSTS_REQUEST, \n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    \n    generateDummyPost,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- LOAD_POST\n// function loadPostAPI(data) {\n//     return axios.get('/api/posts', data);\n// }\n\nfunction* loadPosts() {\n    try {\n        //const result = yield call(loadPostAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: generateDummyPost(10),\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) { return axios.post('/post', { content: data }); }\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* removePost(action) {\n    try {\n        //const result = yield call(removePostAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \nfunction addCommentAPI(data) { return axios.post(`/post/${data.postId}/comment`, data); } \n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}