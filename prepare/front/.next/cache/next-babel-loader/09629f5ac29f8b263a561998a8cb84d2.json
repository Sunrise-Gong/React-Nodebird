{"ast":null,"code":"// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nexport var initialState = {\n  mainPosts: [],\n  singlePost: null,\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  loadUserPostsLoading: false,\n  loadUserPostsDone: false,\n  loadUserPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n}; //-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{ src: faker.image.image() }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '해돋이',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n//  \n//-------------------------------------------- 액션\n\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport var LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport var LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport var UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport var UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE'; //--------------------------------------------\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      //-------------------------------------- REMOVE_IMAGE\n      case REMOVE_IMAGE:\n        draft.imagePaths = draft.imagePaths.filter(function (v, i) {\n          return i !== action.data;\n        });\n        break;\n      //-------------------------------------- RETWEET\n\n      case RETWEET_REQUEST:\n        draft.retweetLoading = true;\n        draft.retweetDone = false;\n        draft.retweetError = null;\n        break;\n\n      case RETWEET_SUCCESS:\n        {\n          draft.retweetLoading = false;\n          draft.retweetDone = true;\n          draft.mainPosts.unshift(action.data);\n          break;\n        }\n\n      case RETWEET_FAILURE:\n        draft.retweetLoading = false;\n        draft.retweetError = action.error;\n        break;\n      //-------------------------------------- UPLOAD_IMAGES\n\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      //-------------------------------------- LIKE_POST\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      //-------------------------------------- UNLIKE_POST\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          var _post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post.Likers = _post.Likers.filter(function (v) {\n            return v.id !== action.data.UserId;\n          });\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      //-------------------------------------- LOAD_POST\n\n      case LOAD_POST_REQUEST:\n        draft.loadPostLoading = true;\n        draft.loadPostDone = false;\n        draft.loadPostError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostLoading = false;\n        draft.loadPostDone = true;\n        draft.singlePost = action.data;\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostLoading = false;\n        draft.loadPostError = action.error;\n        break;\n      //-------------------------------------- LOAD_POSTS\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        console.log('메인포스트 갯수', draft.mainPosts);\n        draft.hasMorePosts = action.data.length === 10;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      //-------------------------------------- ADD_POST\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        draft.imagePaths = [];\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data.PostId;\n        }); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var _post2 = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n\n          _post2.Comments.unshift(action.data);\n\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","singlePost","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostLoading","loadPostDone","loadPostError","loadPostsLoading","loadPostsDone","loadPostsError","loadUserPostsLoading","loadUserPostsDone","loadUserPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_IMAGE","addPost","data","type","addComment","reducer","state","action","draft","filter","v","i","unshift","error","post","find","id","PostId","Likers","push","UserId","concat","console","log","length","Comments"],"mappings":"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","sourcesContent":["// import shortId from 'shortid';\nimport produce from 'immer';\n// import faker from 'faker';\n\nexport const initialState = {\n        mainPosts: [],\n        singlePost: null,\n        imagePaths: [], // 이미지 업로드시 경로 저장\n        \n        hasMorePosts: true,\n\n        likePostLoading: false,\n        likePostDone: false,\n        likePostError: null,\n\n        unlikePostLoading: false,\n        unlikePostDone: false,\n        unlikePostError: null,\n\n        loadPostLoading: false,\n        loadPostDone: false,\n        loadPostError: null,\n        \n        loadPostsLoading: false,\n        loadPostsDone: false,\n        loadPostsError: null,\n\n        loadUserPostsLoading: false,\n        loadUserPostsDone: false,\n        loadUserPostsError: null,\n\n        addPostLoading: false,\n        addPostDone: false,\n        addPostError: null,\n\n        removePostLoading: false,\n        removePostDone: false,\n        removePostError: null,\n\n        addCommentLoading: false,\n        addCommentDone: false,\n        addCommentError: null,\n        \n        uploadImagesLoading: false,\n        uploadImagesDone: false,\n        uploadImagesError: null,\n        \n        retweetLoading: false,\n        retweetDone: false,\n        retweetError: null,\n};\n\n//-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n\n//     id: shortId.generate(),\n\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//     },\n\n//     content: faker.lorem.paragraph(),\n\n//     Images: [{ src: faker.image.image() }],\n\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n\n// }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '해돋이',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n\n//  \n\n//-------------------------------------------- 액션\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\n\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\n\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n        type: ADD_POST_REQUEST,\n        data,\n});\n\nexport const addComment = (data) => ({\n        type: ADD_COMMENT_REQUEST,\n        data,\n});\n\nconst reducer = (state = initialState, action) => {\n        return produce(state, (draft) => {\n                switch (action.type) {\n                        //-------------------------------------- REMOVE_IMAGE\n                        case REMOVE_IMAGE:\n                                draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n                                break;\n                        //-------------------------------------- RETWEET\n                        case RETWEET_REQUEST:\n                                draft.retweetLoading = true;\n                                draft.retweetDone = false;\n                                draft.retweetError = null;\n                                break;\n                        case RETWEET_SUCCESS: {\n                                draft.retweetLoading = false;\n                                draft.retweetDone = true;\n                                draft.mainPosts.unshift(action.data);\n                                break;\n                        }\n                        case RETWEET_FAILURE:\n                                draft.retweetLoading = false;\n                                draft.retweetError = action.error;\n                                break;\n                        //-------------------------------------- UPLOAD_IMAGES\n                        case UPLOAD_IMAGES_REQUEST:\n                                draft.uploadImagesLoading = true;\n                                draft.uploadImagesDone = false;\n                                draft.uploadImagesError = null;\n                                break;\n                        case UPLOAD_IMAGES_SUCCESS: {\n                                draft.imagePaths = action.data;\n                                draft.uploadImagesLoading = false;\n                                draft.uploadImagesDone = true;\n                                break;\n                        }\n                        case UPLOAD_IMAGES_FAILURE:\n                                draft.uploadImagesLoading = false;\n                                draft.uploadImagesError = action.error;\n                                break;\n                        //-------------------------------------- LIKE_POST\n                        case LIKE_POST_REQUEST:\n                                draft.likePostLoading = true;\n                                draft.likePostDone = false;\n                                draft.likePostError = null;\n                                break;\n                        case LIKE_POST_SUCCESS: {\n                                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                                post.Likers.push({ id: action.data.UserId });\n                                draft.likePostLoading = false;\n                                draft.likePostDone = true;\n                                break;\n                        }\n                        case LIKE_POST_FAILURE:\n                                draft.likePostLoading = false;\n                                draft.likePostError = action.error;\n                                break;\n                        //-------------------------------------- UNLIKE_POST\n                        case UNLIKE_POST_REQUEST:\n                                draft.unlikePostLoading = true;\n                                draft.unlikePostDone = false;\n                                draft.unlikePostError = null;\n                                break;\n                        case UNLIKE_POST_SUCCESS: {\n                                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n                                draft.unlikePostLoading = false;\n                                draft.unlikePostDone = true;\n                                break;\n                        }\n                        case UNLIKE_POST_FAILURE:\n                                draft.unlikePostLoading = false;\n                                draft.unlikePostError = action.error;\n                                break;\n                        //-------------------------------------- LOAD_POST\n                        case LOAD_POST_REQUEST:\n                                draft.loadPostLoading = true;\n                                draft.loadPostDone = false;\n                                draft.loadPostError = null;\n                                break;\n                        case LOAD_POST_SUCCESS:\n                                draft.loadPostLoading = false;\n                                draft.loadPostDone = true;\n                                draft.singlePost = action.data;\n                                break;\n                        case LOAD_POST_FAILURE:\n                                draft.loadPostLoading = false;\n                                draft.loadPostError = action.error;\n                                break;\n                        //-------------------------------------- LOAD_POSTS\n                        case LOAD_POSTS_REQUEST:\n                                draft.loadPostsLoading = true;\n                                draft.loadPostsDone = false;\n                                draft.loadPostsError = null;\n                                break;\n                        case LOAD_POSTS_SUCCESS:\n                                draft.loadPostsLoading = false;\n                                draft.loadPostsDone = true;\n                                draft.mainPosts = draft.mainPosts.concat(action.data);\n                                console.log('메인포스트 갯수', draft.mainPosts);\n                                draft.hasMorePosts = action.data.length === 10;\n                                break;\n                        case LOAD_POSTS_FAILURE:\n                                draft.loadPostsLoading = false;\n                                draft.loadPostsError = action.error;\n                                break;\n                        //-------------------------------------- ADD_POST\n                        case ADD_POST_REQUEST:\n                                draft.addPostLoading = true;\n                                draft.addPostDone = false;\n                                draft.addPostError = null;\n                                break;\n                        case ADD_POST_SUCCESS:\n                                draft.addPostLoading = false;\n                                draft.addPostDone = true;\n                                draft.mainPosts.unshift(action.data);\n                                draft.imagePaths = [];\n                                break;\n                        case ADD_POST_FAILURE:\n                                draft.addPostLoading = false;\n                                draft.addPostError = action.error;\n                                break;\n                        //-------------------------------------- REMOVE_POST\n                        case REMOVE_POST_REQUEST:\n                                draft.removePostLoading = true;\n                                draft.removePostDone = false;\n                                draft.removePostError = null;\n                                break;\n                        case REMOVE_POST_SUCCESS:\n                                draft.removePostLoading = false;\n                                draft.removePostDone = true;\n                                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                                break;\n                        case REMOVE_POST_FAILURE:\n                                draft.removePostLoading = false;\n                                draft.removePostError = action.error;\n                                break;\n                        //-------------------------------------- ADD_COMMENT\n                        case ADD_COMMENT_REQUEST:\n                                draft.addCommentLoading = true;\n                                draft.addCommentDone = false;\n                                draft.addCommentError = null;\n                                break;\n                        case ADD_COMMENT_SUCCESS: {\n                                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                                post.Comments.unshift(action.data);\n                                draft.addCommentLoading = false;\n                                draft.addCommentDone = true;\n                                break;\n                        }\n                        case ADD_COMMENT_FAILURE:\n                                draft.addCommentLoading = false;\n                                draft.addCommentError = action.error;\n                                break;\n                        default:\n                                break;\n                }\n        });\n};\n\nexport default reducer;\n\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/"]},"metadata":{},"sourceType":"module"}