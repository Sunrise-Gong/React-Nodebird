{"ast":null,"code":"import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\n\nimport axios from 'axios'; //-------------------------------------------------- LOG_IN\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    /*\n    const result = logInAPI(action.data);\n    이렇게 하지 않는 이유는?\n    .next를 통해서 실행 시키면 yield 구간마다 멈추기 때문에\n    saga는 테스트할 때 엄청 편해요.\n    */\n    const result = yield call(logInAPI, action.data);\n    /* call을 사용한 이유는?\n    fork는 비동기 함수 호출이여서 \n    여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n    call(동기 함수 호출)을 사용 한 것입니다.\n    */\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take('LOG_IN_REQUEST', logIn); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n} //-------------------------------------------------- LOG_OUT\n\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield take('LOG_OUT_REQUEST', logOut);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/index.js"],"names":["all","call","fork","put","take","axios","logInAPI","data","post","logIn","action","result","type","err","response","watchLogin","logOutAPI","logOut","watchLogout","addPostAPI","addPost","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAAiE;;AACjE,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACR;AACA;AACA;AACA;AACA;AAEQ,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACK,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB;AACA;AACR;AACA;AACA;AACA;;AAEQ,UAAMJ,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAKH,GApBD,CAoBE,OAAOM,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUQ,UAAV,GAAuB;AACnB,QAAMX,IAAI,CAAC,gBAAD,EAAmBK,KAAnB,CAAV,CADmB,CACkB;AACxC,C,CAED;;;AACA,SAASO,SAAT,GAAqB;AACjB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA,UAAMN,MAAM,GAAG,MAAMV,IAAI,CAACe,SAAD,CAAzB;AAEA,UAAMb,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAKH,GARD,CAQE,OAAOM,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUW,WAAV,GAAwB;AACpB,QAAMd,IAAI,CAAC,iBAAD,EAAoBa,MAApB,CAAV;AACH,C,CAED;;;AACA,SAASE,UAAT,CAAoBZ,IAApB,EAA0B;AACtB,SAAOF,KAAK,CAACG,IAAN,CAAW,WAAX,EAAwBD,IAAxB,CAAP;AACH;;AAED,UAAUa,OAAV,CAAkBV,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMV,IAAI,CAACkB,UAAD,EAAaT,MAAM,CAACH,IAApB,CAAzB;AAEA,UAAMJ,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAKH,GARD,CAQE,OAAOM,GAAP,EAAY;AACV,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE,kBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUc,YAAV,GAAyB;AACrB,QAAMjB,IAAI,CAAC,kBAAD,EAAqBgB,OAArB,CAAV;AACH;;AAGD,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMtB,GAAG,CAAC,CACNE,IAAI,CAACa,UAAD,CADE,EAENb,IAAI,CAACgB,WAAD,CAFE,EAGNhB,IAAI,CAACmB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\nimport axios from 'axios';\n\n//-------------------------------------------------- LOG_IN\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n    try {\n        /*\n        const result = logInAPI(action.data);\n        이렇게 하지 않는 이유는?\n        .next를 통해서 실행 시키면 yield 구간마다 멈추기 때문에\n        saga는 테스트할 때 엄청 편해요.\n        */\n        \n        const result = yield call(logInAPI, action.data);\n        /* call을 사용한 이유는?\n        fork는 비동기 함수 호출이여서 \n        여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n        call(동기 함수 호출)을 사용 한 것입니다.\n        */\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\n//-------------------------------------------------- LOG_OUT\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try {\n        const result = yield call(logOutAPI)\n\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogout() {\n    yield take('LOG_OUT_REQUEST', logOut);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) {\n    return axios.post('/api/post', data);\n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data)\n\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'ADD_POST_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST', addPost);\n}\n\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}