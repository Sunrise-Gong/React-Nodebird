{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; //<-이거 안쓰면 eslint:recommended 설정에 걸림\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading,\n    retweetError\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }, []); // 첫 렌더링 후 실행\n\n  useEffect(() => {\n    function onScroll() {\n      // console.log( \n      //     window.scrollY, // 얼마나 내렸는지\n      //     document.documentElement.clientHeight, // 화면이 보이는 길이\n      //     document.documentElement.scrollHeight, // 총 세로 길이 \n      //     );\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    }; // 이거 안하면 메모리에 쌓임\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 20\n    }\n  }), mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 38\n    }\n  })), \";\");\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(context => {\n  context.store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n});\nexport default Home;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","wrapper","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","post","alert","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","addEventListener","removeEventListener","map","getServerSideProps","context","store"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'; //<-이거 안쓰면 eslint:recommended 설정에 걸림\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state) => state.post);\n    \n    useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]);\n\n    useEffect(() => { \n        dispatch({ type: LOAD_POSTS_REQUEST }); \n        dispatch({ type: LOAD_USER_REQUEST }); \n    }, []); // 첫 렌더링 후 실행\n\n    useEffect(() => {\n        function onScroll() {\n            // console.log( \n            //     window.scrollY, // 얼마나 내렸는지\n            //     document.documentElement.clientHeight, // 화면이 보이는 길이\n            //     document.documentElement.scrollHeight, // 총 세로 길이 \n            //     );\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n                if (hasMorePosts && !loadPostsLoading) { \n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\n                    dispatch({ type: LOAD_POSTS_REQUEST, lastId });\n                }\n            }\n        }\n        window.addEventListener('scroll', onScroll);\n        return () => { window.removeEventListener('scroll', onScroll); }; // 이거 안하면 메모리에 쌓임\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)};\n        </AppLayout>\n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\n    context.store.dispatch({ type: LOAD_POSTS_REQUEST });\n    context.store.dispatch({ type: LOAD_USER_REQUEST }); \n});\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}