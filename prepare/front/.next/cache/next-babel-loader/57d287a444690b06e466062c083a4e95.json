{"ast":null,"code":"import { all, fork, delay, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE } from '../reducers/user'; //-------------------------------------------------- LOAD_USER\n\nfunction loadUserAPI() {\n  return axios.get('/user');\n}\n\nfunction* loadUser() {\n  try {\n    const result = yield call(loadUserAPI);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeLatest(LOAD_USER_REQUEST, loadUser);\n} //-------------------------------------------------- LOG_IN\n\n\nfunction logInAPI(data) {\n  //return axios.post('http://localhost:3065/user/login', data);\n  return axios.post('/user/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} //-------------------------------------------------- LOG_OUT\n\n\nfunction logOutAPI() {\n  return axios.post('/user/logout');\n}\n\nfunction* logOut() {\n  try {\n    yield call(logOutAPI);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n} //-------------------------------------------------- SIGN_UP\n\n\nfunction signUpAPI(data) {\n  return axios.post('/user', data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data); // yield delay(1000);\n\n    console.log(result);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n} //-------------------------------------------------- FOLLOW\n// function followAPI() {\n//     return axios.post('/api/follow');\n// }\n\n\nfunction* follow(action) {\n  try {\n    //const result = yield call(followAPI)\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n} //-------------------------------------------------- UNFOLLOW\n// function unfollowAPI() {\n//     return axios.post('/api/unfollow');\n// }\n\n\nfunction* unfollow(action) {\n  try {\n    //const result = yield call(unfollowAPI)\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data // 현 게시글 작성자 아이디\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n} //-------------------------------------------------- userSaga\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLoadUser), fork(watchLogIn), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","call","axios","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","FOLLOW_FAILURE","UNFOLLOW_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","loadUserAPI","get","loadUser","result","type","data","err","error","response","watchLoadUser","logInAPI","post","logIn","action","watchLogIn","logOutAPI","logOut","watchLogOut","signUpAPI","signUp","console","log","watchSignUp","follow","watchFollow","unfollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["import { all, fork, delay, put, takeLatest, call } from 'redux-saga/effects';\nimport axios from 'axios';\n\nimport { \n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, \n    FOLLOW_REQUEST, FOLLOW_SUCCESS, FOLLOW_FAILURE, \n    UNFOLLOW_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST,\n    LOAD_USER_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE,\n} from '../reducers/user';\n\n//-------------------------------------------------- LOAD_USER\nfunction loadUserAPI() {\n    return axios.get('/user');\n}\nfunction* loadUser() {\n    try {\n        const result = yield call(loadUserAPI);\n\n        yield put({\n            type: LOAD_USER_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_USER_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadUser() {\n    yield takeLatest(LOAD_USER_REQUEST, loadUser);\n}\n\n//-------------------------------------------------- LOG_IN\nfunction logInAPI(data) {\n    //return axios.post('http://localhost:3065/user/login', data);\n    return axios.post('/user/login', data);\n}\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data);\n\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\nfunction logOutAPI() {\n    return axios.post('/user/logout');\n}\nfunction* logOut() {\n    try {\n        yield call(logOutAPI);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\n//-------------------------------------------------- SIGN_UP\nfunction signUpAPI(data) {\n    return axios.post('/user', data); \n}\nfunction* signUp(action) {\n    try {\n        const result = yield call(signUpAPI, action.data);\n        // yield delay(1000);\n        console.log(result);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (err) {\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\n//-------------------------------------------------- FOLLOW\n// function followAPI() {\n//     return axios.post('/api/follow');\n// }\nfunction* follow(action) {\n    try {\n        //const result = yield call(followAPI)\n        yield delay(1000);\n        yield put({\n            type: FOLLOW_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: FOLLOW_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction* watchFollow() {\n    yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\n//-------------------------------------------------- UNFOLLOW\n// function unfollowAPI() {\n//     return axios.post('/api/unfollow');\n// }\nfunction* unfollow(action) {\n    try {\n        //const result = yield call(unfollowAPI)\n        yield delay(1000);\n        yield put({\n            type: UNFOLLOW_SUCCESS,\n            data: action.data, // 현 게시글 작성자 아이디\n        });\n    } catch (err) {\n        yield put({\n            type: UNFOLLOW_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction* watchUnfollow() {\n    yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\n//-------------------------------------------------- userSaga\nexport default function* userSaga() {\n    yield all([\n        fork(watchLoadUser),\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n        fork(watchFollow),\n        fork(watchUnfollow),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}