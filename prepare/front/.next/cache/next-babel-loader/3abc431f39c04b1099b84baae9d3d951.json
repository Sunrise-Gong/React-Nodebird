{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios'; //-------------------------------------------------- LOG_IN\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction logIn(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(logInAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //-------------------------------------------------- LOG_OUT\n\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction logOut() {\n  var result;\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(logOutAPI);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: 'LOG_OUT_SUCCESS'\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["logIn","watchLogIn","logOut","watchLogOut","userSaga","all","fork","delay","put","takeLatest","call","axios","logInAPI","data","post","action","result","type","response","logOutAPI"],"mappings":";;oDAOUA,K;qDAwDAC,U;qDASAC,M;qDAiBAC,W;qDAIeC,Q;;AA7FzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,SAAUb,KAAV,CAAgBe,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAML,IAAI,CAACE,QAAD,EAAWG,MAAM,CAACF,IAAlB,CAAV;;AAFvB;AAEcG,UAAAA,MAFd;AAAA;AAGQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAeQ,iBAAMC,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE,gBADA;AAENJ,YAAAA,IAAI,EAAEG,MAAM,CAACH;AAFP,WAAD,CAAT;;AAfR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAqBQ,iBAAML,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE,gBADA;AAENJ,YAAAA,IAAI,EAAE,YAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AArBR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAUZ,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAMQ,UAAU,CAAC,gBAAD,EAAmBT,KAAnB,CAAhB;;AADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,SAASmB,SAAT,GAAqB;AACjB,SAAOR,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,SAAUZ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMQ,IAAI,CAACS,SAAD,CAAV;;AAFvB;AAEcH,UAAAA,MAFd;AAAA;AAGQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMT,GAAG,CAAC;AACNS,YAAAA,IAAI,EAAE,iBADA;AAENJ,YAAAA,IAAI,EAAE,aAAIK,QAAJ,CAAaL;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUV,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,iBAAD,EAAoBP,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\n\n//-------------------------------------------------- LOG_IN\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        /* call을 사용한 이유는?\n        fork는 비동기 함수 호출이여서 \n        여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n        call(동기 함수 호출)을 사용 한 것입니다.\n        \n        const result = logInAPI(action.data);\n        이렇게 하지 않는 이유는?\n        .next를 통해서 실행 시키면 yield 구간마다 멈추기 때문에\n        saga는 테스트할 때 엄청 편해요.\n        */\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\nfunction* watchLogIn() {\n        yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try {\n        const result = yield call(logOutAPI)\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),   \n        fork(watchLogOut)        \n    ])\n}"]},"metadata":{},"sourceType":"module"}