{"ast":null,"code":"import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\n\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* login() {\n  try {\n    const result = yield call(loginAPI);\n    /* call을 사용한 이유는?\n    fork는 비동기 함수 호출이여서 \n    여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n    call(동기 함수 호출)을 사용한 것입니다.\n    */\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take('LOG_IN_REQUEST', login); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\nfunction* watchLogout() {\n  yield take('LOG_OUT_REQUEST');\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST');\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/index.js"],"names":["all","call","fork","put","take","axios","loginAPI","post","login","result","type","data","err","response","watchLogin","watchLogout","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAAiE;;AACjE,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAChB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACK,QAAD,CAAzB;AACA;AACR;AACA;AACA;AACA;;AAEQ,UAAMH,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAKH,GAbD,CAaE,OAAOC,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUG,UAAV,GAAuB;AACnB,QAAMV,IAAI,CAAC,gBAAD,EAAmBI,KAAnB,CAAV,CADmB,CACkB;AACxC;;AAED,UAAUO,WAAV,GAAwB;AACpB,QAAMX,IAAI,CAAC,iBAAD,CAAV;AACH;;AAED,UAAUY,YAAV,GAAyB;AACrB,QAAMZ,IAAI,CAAC,kBAAD,CAAV;AACH;;AAED,eAAe,UAAUa,QAAV,GAAqB;AAChC,QAAMjB,GAAG,CAAC,CACNE,IAAI,CAACY,UAAD,CADE,EAENZ,IAAI,CAACa,WAAD,CAFE,EAGNb,IAAI,CAACc,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\nimport axios from 'axios';\n\nfunction loginAPI() {\n    return axios.post('/api/login');\n}\n\nfunction* login() {\n    try {\n        const result = yield call(loginAPI)\n        /* call을 사용한 이유는?\n        fork는 비동기 함수 호출이여서 \n        여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n        call(동기 함수 호출)을 사용한 것입니다.\n        */\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', login); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\nfunction* watchLogout() {\n    yield take('LOG_OUT_REQUEST');\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST');\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}