{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from 'redux-saga/effects'; // import axios from 'axios';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user'; //-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n} //-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n} //-------------------------------------------------- SIGN_UP\n// function signUpAPI() {\n//     return axios.post('/api/logout');\n// }\n\n\nfunction* signUp() {\n  try {\n    //const result = yield call(signUpAPI)\n    yield delay(1000);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n} //-------------------------------------------------- userSaga\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","logIn","action","type","data","err","error","response","watchLogIn","logOut","watchLogOut","signUp","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CACA;;AAEA,SACIC,cADJ,EACoBC,cADpB,EACoCC,cADpC,EAEIC,eAFJ,EAEqBC,eAFrB,EAEsCC,eAFtC,EAGIC,eAHJ,EAGqBC,eAHrB,EAGsCC,eAHtC,QAIO,kBAJP,C,CAMA;AACA;AACA;AACA;;AACA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEV,cADA;AAENW,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMf,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAET,cADA;AAENY,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUI,UAAV,GAAuB;AACnB,QAAMjB,UAAU,CAACC,cAAD,EAAiBS,KAAjB,CAAhB;AACH,C,CAED;AACA;AACA;AACA;;;AACA,UAAUQ,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMpB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEP;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOS,GAAP,EAAY;AACV,UAAMf,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEN,eADA;AAENS,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUM,WAAV,GAAwB;AACpB,QAAMnB,UAAU,CAACI,eAAD,EAAkBc,MAAlB,CAAhB;AACH,C,CAED;AACA;AACA;AACA;;;AACA,UAAUE,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMtB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH,GAND,CAME,OAAOM,GAAP,EAAY;AACV,UAAMf,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAEH,eADA;AAENM,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AACJ;;AACD,UAAUQ,WAAV,GAAwB;AACpB,QAAMrB,UAAU,CAACO,eAAD,EAAkBa,MAAlB,CAAhB;AACH,C,CAED;;;AACA,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAM1B,GAAG,CAAC,CACNC,IAAI,CAACoB,UAAD,CADE,EAENpB,IAAI,CAACsB,WAAD,CAFE,EAGNtB,IAAI,CAACwB,WAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, fork, delay, put, takeLatest } from 'redux-saga/effects';\n// import axios from 'axios';\n\nimport { \n    LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE,\n    LOG_OUT_REQUEST, LOG_OUT_SUCCESS, LOG_OUT_FAILURE,\n    SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE,\n} from '../reducers/user';\n\n//-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\nfunction* logIn(action) {\n    try {\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLogIn() {\n    yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\nfunction* logOut() {\n    try {\n        //const result = yield call(logOutAPI)\n        yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n    } catch (err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction* watchLogOut() {\n    yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\n//-------------------------------------------------- SIGN_UP\n// function signUpAPI() {\n//     return axios.post('/api/logout');\n// }\nfunction* signUp() {\n    try {\n        //const result = yield call(signUpAPI)\n        yield delay(1000);\n        yield put({\n            type: SIGN_UP_SUCCESS,\n        });\n    } catch (err) {\n        yield put({\n            type: SIGN_UP_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\nfunction* watchSignUp() {\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\n//-------------------------------------------------- userSaga\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut),\n        fork(watchSignUp),\n    ]);\n}"]},"metadata":{},"sourceType":"module"}