{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducers';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log(action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var middlewares = [thunkMiddleware, loggerMiddleware];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) // production \n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); // Development\n\n  var store = createStore(reducer, enhancer);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","thunkMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,MAAGC,QAAH,QAAGA,QAAH;AAAA,MAAYC,QAAZ,QAAYA,QAAZ;AAAA,SAA2B,UAACC,IAAD;AAAA,WAAU,UAACC,MAAD,EAAY;AACtEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,aAAOD,IAAI,CAACC,MAAD,CAAX;AACH,KAHmD;AAAA,GAA3B;AAAA,CAAzB;;AAKA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,MAAMC,WAAW,GAAG,CAACV,eAAD,EAAkBE,gBAAlB,CAApB;AAEA,MAAMS,QAAQ,GAAG,QACfd,OAAO,CAACD,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CADQ,CAC0B;AAD1B,IAEfX,mBAAmB,CAACH,eAAe,MAAf,SAAmBc,WAAnB,CAAD,CAFrB,CAHyB,CAK8B;;AAEvD,MAAME,KAAK,GAAGd,WAAW,CAACG,OAAD,EAAUU,QAAV,CAAzB;AACA,SAAOC,KAAP;AACH,CATD;;AAWA,IAAMC,OAAO,GAAGlB,aAAa,CAACc,cAAD,EAAiB;AAC1C;AACAK,EAAAA,KAAK;AAFqC,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({ dispatch,getState }) => (next) => (action) => {\n    console.log(action);\n    return next(action);\n}\n\nconst configureStore = () => {\n    const middlewares = [thunkMiddleware, loggerMiddleware];\n\n    const enhancer = process.env.NODE_ENV === 'production' \n    ? compose(applyMiddleware(...middlewares)) // production \n    : composeWithDevTools(applyMiddleware(...middlewares)) // Development\n    \n    const store = createStore(reducer, enhancer);\n    return store\n};\n\nconst wrapper = createWrapper(configureStore, {\n    //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n    debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}