{"ast":null,"code":"import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects'; //import shortId from 'shortid';\n\nimport axios from 'axios';\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE //generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- LIKE_POST\n\nfunction likePostAPI(data) {\n  return axios.post('/post', {\n    PostId: data\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n} //-------------------------------------------------- UNLIKE_POST\n\n\nfunction unlikePostAPI(data) {\n  return axios.post('/post', {\n    PostId: data\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n} //-------------------------------------------------- LOAD_POST\n\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadPosts() {\n  try {\n    const result = yield call(loadPostsAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["all","takeLatest","fork","put","delay","call","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","likePostAPI","data","post","PostId","likePost","action","result","type","err","response","watchLikePost","unlikePostAPI","unlikePost","watchUnlikePost","loadPostsAPI","get","loadPosts","watchLoadPosts","addPostAPI","content","addPost","id","watchAddPost","removePost","watchRemovePost","addCommentAPI","postId","addComment","console","error","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\n//import shortId from 'shortid';\nimport axios from 'axios';\n\nimport {\n    LIKE_POST_REQUEST, \n    LIKE_POST_SUCCESS, \n    LIKE_POST_FAILURE,\n    \n    UNLIKE_POST_REQUEST, \n    UNLIKE_POST_SUCCESS, \n    UNLIKE_POST_FAILURE,\n    \n    LOAD_POSTS_REQUEST, \n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    \n    //generateDummyPost,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- LIKE_POST\nfunction likePostAPI(data) { return axios.post('/post', { PostId: data }); }\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LIKE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLikePost() { yield takeLatest(LIKE_POST_REQUEST, likePost); }\n\n//-------------------------------------------------- UNLIKE_POST\nfunction unlikePostAPI(data) { return axios.post('/post', { PostId: data }); }\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchUnlikePost() { yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); }\n\n//-------------------------------------------------- LOAD_POST\nfunction loadPostsAPI() { return axios.get('/posts'); }\n\nfunction* loadPosts() {\n    try {\n        const result = yield call(loadPostsAPI);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) { \n    return axios.post('/post', { content: data }); \n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* removePost(action) {\n    try {\n        //const result = yield call(removePostAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \nfunction addCommentAPI(data) { \n    return axios.post(`/post/${data.postId}/comment`, data); \n} \n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}