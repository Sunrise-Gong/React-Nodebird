{"ast":null,"code":"import { all, takeLatest, fork, put, delay, call, throttle } from 'redux-saga/effects'; //import shortId from 'shortid';\n\nimport axios from 'axios';\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE //generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- RETWEET\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\n\nfunction retweetAPI(data) {\n  return axios.post(`/post/${data}/retweet`);\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: RETWEET_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n} //-------------------------------------------------- UPLOAD_IMAGES\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\n\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n} //-------------------------------------------------- LIKE_POST\n\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n} //-------------------------------------------------- UNLIKE_POST\n\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n} //-------------------------------------------------- LOAD_POST\n\n\nfunction loadPostAPI(data) {\n  return axios.get(`/post/${data}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n} //-------------------------------------------------- LOAD_USER_POSTS (특정 유저의 게시글들)\n\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n} //-------------------------------------------------- LOAD_HASHTAG_POSTS (특정 해시태그의 게시글들)\n\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n} //-------------------------------------------------- LOAD_POSTS (게시글들)\n\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(`/posts?lastId=${lastId || 0}`);\n}\n\nfunction* loadPosts(action) {\n  try {\n    const result = yield call(loadPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts); // yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //-------------------------------------------------- REMOVE_POST\n\n\nfunction removePostAPI(data) {\n  return axios.delete(`/post/${data}`);\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["all","takeLatest","fork","put","delay","call","throttle","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","retweet","action","result","type","err","error","response","watchRetweet","uploadImagesAPI","uploadImages","watchUploadImages","likePostAPI","patch","likePost","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","loadPostAPI","get","loadPost","watchLoadPost","loadUserPostsAPI","lastId","loadUserPosts","watchLoadUserPosts","loadHashtagPostsAPI","loadHashtagPosts","console","watchLoadHashtagPosts","loadPostsAPI","loadPosts","watchLoadPosts","addPostAPI","addPost","id","watchAddPost","removePostAPI","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call, throttle } from 'redux-saga/effects';\n//import shortId from 'shortid';\nimport axios from 'axios';\n\nimport {\n    LIKE_POST_REQUEST, \n    LIKE_POST_SUCCESS, \n    LIKE_POST_FAILURE,\n    \n    UNLIKE_POST_REQUEST, \n    UNLIKE_POST_SUCCESS, \n    UNLIKE_POST_FAILURE,\n    \n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    LOAD_USER_POSTS_REQUEST,\n    LOAD_USER_POSTS_SUCCESS, \n    LOAD_USER_POSTS_FAILURE,\n\n    LOAD_HASHTAG_POSTS_REQUEST,\n    LOAD_HASHTAG_POSTS_SUCCESS, \n    LOAD_HASHTAG_POSTS_FAILURE,\n    \n    LOAD_POST_REQUEST,\n    LOAD_POST_SUCCESS, \n    LOAD_POST_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n\n    UPLOAD_IMAGES_REQUEST,\n    UPLOAD_IMAGES_SUCCESS,\n    UPLOAD_IMAGES_FAILURE,\n    \n    RETWEET_REQUEST,\n    RETWEET_SUCCESS,\n    RETWEET_FAILURE,\n    //generateDummyPost,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- RETWEET\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\nfunction retweetAPI(data) { return axios.post(`/post/${data}/retweet`); } \n\nfunction* retweet(action) {\n    try {\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: RETWEET_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRetweet() { yield takeLatest(RETWEET_REQUEST, retweet); }\n\n//-------------------------------------------------- UPLOAD_IMAGES\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\nfunction uploadImagesAPI(data) { return axios.post('/post/images', data); } \n\nfunction* uploadImages(action) {\n    try {\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchUploadImages() { yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages); }\n\n//-------------------------------------------------- LIKE_POST\nfunction likePostAPI(data) { return axios.patch(`/post/${data}/like`); }\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLikePost() { yield takeLatest(LIKE_POST_REQUEST, likePost); }\n\n//-------------------------------------------------- UNLIKE_POST\nfunction unlikePostAPI(data) { return axios.delete(`/post/${data}/like`); }\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchUnlikePost() { yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); }\n\n//-------------------------------------------------- LOAD_POST\nfunction loadPostAPI(data) { return axios.get(`/post/${data}`); }\n\nfunction* loadPost(action) {\n    try {\n        const result = yield call(loadPostAPI, action.data);\n\n        yield put({ \n            type: LOAD_POST_SUCCESS, \n            data: result.data, \n        });\n    } catch (err) {\n        yield put({ \n            type: LOAD_POST_FAILURE, \n            error: err.response.data, \n        });\n    }\n}\n\nfunction* watchLoadPost() { yield takeLatest(LOAD_POST_REQUEST, loadPost); }\n\n//-------------------------------------------------- LOAD_USER_POSTS (특정 유저의 게시글들)\nfunction loadUserPostsAPI(data, lastId) { return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); }\n\nfunction* loadUserPosts(action) {\n    try {\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\n//-------------------------------------------------- LOAD_HASHTAG_POSTS (특정 해시태그의 게시글들)\nfunction loadHashtagPostsAPI(data, lastId) { return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`); }\n\nfunction* loadHashtagPosts(action) {\n    try {\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\n//-------------------------------------------------- LOAD_POSTS (게시글들)\nfunction loadPostsAPI(lastId) { return axios.get(`/posts?lastId=${lastId || 0}`); }\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.lastId);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    // yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) { return axios.post('/post', data); }\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\nfunction removePostAPI(data) { return axios.delete(`/post/${data}`); }\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \nfunction addCommentAPI(data) { \n    return axios.post(`/post/${data.postId}/comment`, data); \n} \n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchRetweet),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchLoadPost),\n        fork(watchLoadPosts),\n        fork(watchLoadUserPosts),\n        fork(watchLoadHashtagPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}