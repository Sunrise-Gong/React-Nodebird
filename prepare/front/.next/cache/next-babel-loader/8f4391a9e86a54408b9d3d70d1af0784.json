{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post'; //액션\n\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput(''); //------------------------------------------------ 작성한 글이 업로드 성공시 인풋창 비우기\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]); //------------------------------------------------ 이미지 업로드 버튼 클릭\n\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]); //------------------------------------------------ 이미지 업로드 \n\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    }); // e.target.files 가 유사 배열이여서 call 을 사용함\n\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onRemoveImage = useCallback(index => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: index\n    });\n  }); //------------------------------------------------ 게시글/이미지 등록버튼 클릭\n\n  const onSubmit = useCallback(() => {\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20 px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n    /* 이미지 선택후 확인을 누르면 실행됨 */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, imagePaths.map((v, i) => // 이미지 업로드 미리보기 부분\n  __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: '200px'\n    },\n    alt: v,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, __jsx(Button, {\n    onClick: onRemoveImage(i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 29\n    }\n  }, \"\\uC81C\\uAC70\"))))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Button","Form","Input","useDispatch","useSelector","ADD_POST_REQUEST","REMOVE_IMAGE","UPLOAD_IMAGES_REQUEST","useInput","PostForm","imagePaths","addPostDone","state","post","dispatch","text","onChangeText","setText","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","type","data","onRemoveImage","index","onSubmit","formData","p","margin","marginBottom","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';//액션\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\n    const dispatch = useDispatch();\n    const [text, onChangeText, setText] = useInput('');\n//------------------------------------------------ 작성한 글이 업로드 성공시 인풋창 비우기\n    \n    useEffect(() => { if (addPostDone) { setText(''); } }, [addPostDone]);\n\n//------------------------------------------------ 이미지 업로드 버튼 클릭\n    const imageInput = useRef();\n    \n    const onClickImageUpload = useCallback(() => { imageInput.current.click(); }, [imageInput.current]);\n\n//------------------------------------------------ 이미지 업로드 \n    const onChangeImages = useCallback((e) => {\n        console.log('images', e.target.files);\n        \n        const imageFormData = new FormData();\n        \n        [].forEach.call(e.target.files, (f) => { imageFormData.append('image', f); }); // e.target.files 가 유사 배열이여서 call 을 사용함\n        \n        dispatch({ type: UPLOAD_IMAGES_REQUEST, data: imageFormData });\n    }, []);\n\n    const onRemoveImage = useCallback((index) => () => {\n        dispatch({\n            type: REMOVE_IMAGE,\n            data: index,\n        });\n    });\n//------------------------------------------------ 게시글/이미지 등록버튼 클릭\n    const onSubmit = useCallback(() => {\n        const formData = new FormData();\n        \n        imagePaths.forEach((p) => { formData.append('image', p); });\n        \n        formData.append('content', text);\n        \n        dispatch({ type: ADD_POST_REQUEST, data: formData });\n    }, [text, imagePaths]);\n\n    return (\n        <Form\n            style={{ margin: '10px 0 20 px' }}\n            encType=\"multipart/form-data\"\n            onFinish={onSubmit}>\n{/* --------------------------------------------- 게시글 작성창 */}\n            <Input.TextArea\n                value={text}\n                onChange={onChangeText}\n                maxLength={140}\n                placeholder=\"어떤 신기한 일이 있었나요?\" />\n{/* --------------------------------------------- 이미지 or 게시글 등록 버튼 */}\n            <div style={{ marginBottom: 20 }}>\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages /* 이미지 선택후 확인을 누르면 실행됨 */} />\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n                <Button\n                    type=\"primary\"\n                    style={{ float: 'right' }}\n                    htmlType=\"submit\">\n                    짹짹\n                </Button>\n            </div>\n\n            <div>\n                {imagePaths.map((v, i) => ( // 이미지 업로드 미리보기 부분\n                    <div key={v} style={{ display: 'inline-block' }}>\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\n                        <div>\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\n                        </div>\n                    </div>\n                    ))}\n            </div>\n        </Form>\n    );\n};\n\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}