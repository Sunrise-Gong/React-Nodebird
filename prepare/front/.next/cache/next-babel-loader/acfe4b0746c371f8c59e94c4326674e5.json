{"ast":null,"code":"// import shortId from 'shortid';\nimport produce from 'immer'; // import faker from 'faker';\n\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null\n}; //-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n//     id: shortId.generate(),\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//     },\n//     content: faker.lorem.paragraph(),\n//     Images: [{ src: faker.image.image() }],\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n// }));\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '해돋이',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n//  \n//-------------------------------------------- 액션\n\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      //-------------------------------------- UPLOAD_IMAGES\n      case UPLOAD_IMAGES_REQUEST:\n        draft.uploadImagesLoading = true;\n        draft.uploadImagesDone = false;\n        draft.uploadImagesError = null;\n        break;\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          draft.imagePaths = action.data;\n          draft.uploadImagesLoading = false;\n          draft.uploadImagesDone = true;\n          break;\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesError = action.error;\n        break;\n      //-------------------------------------- LIKE_POST\n\n      case LIKE_POST_REQUEST:\n        draft.likePostLoading = true;\n        draft.likePostDone = false;\n        draft.likePostError = null;\n        break;\n\n      case LIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers.push({\n            id: action.data.UserId\n          });\n          draft.likePostLoading = false;\n          draft.likePostDone = true;\n          break;\n        }\n\n      case LIKE_POST_FAILURE:\n        draft.likePostLoading = false;\n        draft.likePostError = action.error;\n        break;\n      //-------------------------------------- UNLIKE_POST\n\n      case UNLIKE_POST_REQUEST:\n        draft.unlikePostLoading = true;\n        draft.unlikePostDone = false;\n        draft.unlikePostError = null;\n        break;\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n          draft.unlikePostLoading = false;\n          draft.unlikePostDone = true;\n          break;\n        }\n\n      case UNLIKE_POST_FAILURE:\n        draft.unlikePostLoading = false;\n        draft.unlikePostError = action.error;\n        break;\n      //-------------------------------------- LOAD_POSTS\n\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        console.log('메인포스트 갯수', draft.mainPosts.concat(action.data).length);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      //-------------------------------------- ADD_POST\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","error","post","find","v","id","PostId","Likers","push","UserId","filter","concat","console","log","length","unshift","Comments"],"mappings":"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","sourcesContent":["// import shortId from 'shortid';\nimport produce from 'immer';\n// import faker from 'faker';\n\nexport const initialState = {\n        mainPosts: [],\n        imagePaths: [], // 이미지 업로드시 경로 저장\n\n        hasMorePosts: true,\n\n        likePostLoading: false,\n        likePostDone: false,\n        likePostError: null,\n\n        unlikePostLoading: false,\n        unlikePostDone: false,\n        unlikePostError: null,\n\n        loadPostsLoading: false,\n        loadPostsDone: false,\n        loadPostsError: null,\n\n        addPostLoading: false,\n        addPostDone: false,\n        addPostError: null,\n\n        removePostLoading: false,\n        removePostDone: false,\n        removePostError: null,\n\n        addCommentLoading: false,\n        addCommentDone: false,\n        addCommentError: null,\n        \n        uploadImagesLoading: false,\n        uploadImagesDone: false,\n        uploadImagesError: null,\n};\n\n//-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\n// export const generateDummyPost = (number) => Array(number).fill().map(() => ({\n\n//     id: shortId.generate(),\n\n//     User: {\n//         id: shortId.generate(),\n//         nickname: faker.name.findName(),\n//     },\n\n//     content: faker.lorem.paragraph(),\n\n//     Images: [{ src: faker.image.image() }],\n\n//     Comments: [{\n//         User: {\n//             id: shortId.generate(),\n//             nickname: faker.name.findName(),\n//         },\n//         content: faker.lorem.sentence(),\n//     }],\n\n// }));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '해돋이',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n\n//  \n\n//-------------------------------------------- 액션\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\n\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\n\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\n\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n        type: ADD_POST_REQUEST,\n        data,\n});\n\nexport const addComment = (data) => ({\n        type: ADD_COMMENT_REQUEST,\n        data,\n});\n\nconst reducer = (state = initialState, action) => {\n        return produce(state, (draft) => {\n                switch (action.type) {\n                        //-------------------------------------- UPLOAD_IMAGES\n                        case UPLOAD_IMAGES_REQUEST:\n                                draft.uploadImagesLoading = true;\n                                draft.uploadImagesDone = false;\n                                draft.uploadImagesError = null;\n                                break;\n                        case UPLOAD_IMAGES_SUCCESS: {\n                                draft.imagePaths = action.data;\n                                draft.uploadImagesLoading = false;\n                                draft.uploadImagesDone = true;\n                                break;\n                        }\n                        case UPLOAD_IMAGES_FAILURE:\n                                draft.uploadImagesLoading = false;\n                                draft.uploadImagesError = action.error;\n                                break;\n                        //-------------------------------------- LIKE_POST\n                        case LIKE_POST_REQUEST:\n                                draft.likePostLoading = true;\n                                draft.likePostDone = false;\n                                draft.likePostError = null;\n                                break;\n                        case LIKE_POST_SUCCESS: {\n                                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                                post.Likers.push({ id: action.data.UserId });\n                                draft.likePostLoading = false;\n                                draft.likePostDone = true;\n                                break;\n                        }\n                        case LIKE_POST_FAILURE:\n                                draft.likePostLoading = false;\n                                draft.likePostError = action.error;\n                                break;\n                        //-------------------------------------- UNLIKE_POST\n                        case UNLIKE_POST_REQUEST:\n                                draft.unlikePostLoading = true;\n                                draft.unlikePostDone = false;\n                                draft.unlikePostError = null;\n                                break;\n                        case UNLIKE_POST_SUCCESS: {\n                                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                                post.Likers = post.Likers.filter((v) => v.id !== action.data.UserId);\n                                draft.unlikePostLoading = false;\n                                draft.unlikePostDone = true;\n                                break;\n                        }\n                        case UNLIKE_POST_FAILURE:\n                                draft.unlikePostLoading = false;\n                                draft.unlikePostError = action.error;\n                                break;\n                        //-------------------------------------- LOAD_POSTS\n                        case LOAD_POSTS_REQUEST:\n                                draft.loadPostsLoading = true;\n                                draft.loadPostsDone = false;\n                                draft.loadPostsError = null;\n                                break;\n                        case LOAD_POSTS_SUCCESS:\n                                draft.loadPostsLoading = false;\n                                draft.loadPostsDone = true;\n                                draft.mainPosts = draft.mainPosts.concat(action.data);\n                                console.log('메인포스트 갯수', draft.mainPosts.concat(action.data).length);\n                                draft.hasMorePosts = draft.mainPosts.length < 50;\n                                break;\n                        case LOAD_POSTS_FAILURE:\n                                draft.loadPostsLoading = false;\n                                draft.loadPostsError = action.error;\n                                break;\n                        //-------------------------------------- ADD_POST\n                        case ADD_POST_REQUEST:\n                                draft.addPostLoading = true;\n                                draft.addPostDone = false;\n                                draft.addPostError = null;\n                                break;\n                        case ADD_POST_SUCCESS:\n                                draft.addPostLoading = false;\n                                draft.addPostDone = true;\n                                draft.mainPosts.unshift(action.data);\n                                break;\n                        case ADD_POST_FAILURE:\n                                draft.addPostLoading = false;\n                                draft.addPostError = action.error;\n                                break;\n                        //-------------------------------------- REMOVE_POST\n                        case REMOVE_POST_REQUEST:\n                                draft.removePostLoading = true;\n                                draft.removePostDone = false;\n                                draft.removePostError = null;\n                                break;\n                        case REMOVE_POST_SUCCESS:\n                                draft.removePostLoading = false;\n                                draft.removePostDone = true;\n                                draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data.PostId); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                                break;\n                        case REMOVE_POST_FAILURE:\n                                draft.removePostLoading = false;\n                                draft.removePostError = action.error;\n                                break;\n                        //-------------------------------------- ADD_COMMENT\n                        case ADD_COMMENT_REQUEST:\n                                draft.addCommentLoading = true;\n                                draft.addCommentDone = false;\n                                draft.addCommentError = null;\n                                break;\n                        case ADD_COMMENT_SUCCESS: {\n                                const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                                post.Comments.unshift(action.data);\n                                draft.addCommentLoading = false;\n                                draft.addCommentDone = true;\n                                break;\n                        }\n                        case ADD_COMMENT_FAILURE:\n                                draft.addCommentLoading = false;\n                                draft.addCommentError = action.error;\n                                break;\n                        default:\n                                break;\n                }\n        });\n};\n\nexport default reducer;\n\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/"]},"metadata":{},"sourceType":"module"}