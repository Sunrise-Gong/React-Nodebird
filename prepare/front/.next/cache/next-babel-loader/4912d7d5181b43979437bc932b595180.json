{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(logOut),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogOut),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, delay, put, takeLatest } from \"redux-saga/effects\"; // import axios from 'axios';\n//-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('LOG_IN_REQUEST', logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\n\nfunction logOut() {\n  return _regeneratorRuntime.wrap(function logOut$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(1000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: 'LOG_OUT_SUCCESS'\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: 'LOG_OUT_FAILURE',\n            data: _context3.t0.response.data\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchLogOut() {\n  return _regeneratorRuntime.wrap(function watchLogOut$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest('LOG_OUT_REQUEST', logOut);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogIn), fork(watchLogOut)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["logIn","watchLogIn","logOut","watchLogOut","userSaga","all","fork","delay","put","takeLatest","action","type","data","response"],"mappings":";;oDAOUA,K;qDA8CAC,U;qDASAC,M;qDAiBAC,W;qDAIeC,Q;;AAnFzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CACA;AAEA;AACA;AACA;AACA;;AACA,SAAUT,KAAV,CAAgBU,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMH,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAKQ,iBAAMC,GAAG,CAAC;AACNG,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAWQ,iBAAMJ,GAAG,CAAC;AACNG,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAE,YAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AAXR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACQ,iBAAMQ,UAAU,CAAC,gBAAD,EAAmBT,KAAnB,CAAhB;;AADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;AACA;;;AAEA,SAAUE,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMK,KAAK,CAAC,IAAD,CAAX;;AAHR;AAAA;AAIQ,iBAAMC,GAAG,CAAC;AACNG,YAAAA,IAAI,EAAE;AADA,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMH,GAAG,CAAC;AACNG,YAAAA,IAAI,EAAE,iBADA;AAENC,YAAAA,IAAI,EAAE,aAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUT,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAAC,iBAAD,EAAoBP,MAApB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNC,IAAI,CAACL,UAAD,CADE,EAENK,IAAI,CAACH,WAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\n// import axios from 'axios';\n\n//-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\nfunction* logIn(action) {\n    try {\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\nfunction* watchLogIn() {\n        yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\nfunction* logOut() {\n    try {\n        //const result = yield call(logOutAPI)\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),   \n        fork(watchLogOut)        \n    ])\n}"]},"metadata":{},"sourceType":"module"}