{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    },\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bit.ly/34S7zRp'\n    }, {\n      id: shortId.generate(),\n      src: 'https://bit.ly/3uX6IJH'\n    }, {\n      id: shortId.generate(),\n      src: 'https://bit.ly/2TDFv1w'\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: '재원'\n      },\n      content: '키보드 윤활해야지~'\n    }, {\n      User: {\n        id: shortId.generate(),\n        nickname: '선범'\n      },\n      content: '여친이랑 산에 가야지~'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\ninitialState.mainPosts.concat(Array(20).fill().map(function () {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n})); //-------------------------------------------- ADD_POST에 사용될 더미데이터\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    }\n  };\n}; //-------------------------------------------- 액션\n\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      //-------------------------------------- ADD_POST\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","name","findName","lorem","paragraph","image","sentence","dummyPost","data","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n    mainPosts: [\n        {\n            id: 1,\n\n            User: { id: 1, nickname: '해돋이' },\n\n            content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n            Images: [\n                { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n                { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n                { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n            ],\n\n            Comments: [\n                { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n                { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n            ],\n        },\n    ],\n    imagePaths: [], // 이미지 업로드시 경로 저장\n    \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    \n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    \n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null, \n};\n\n//-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\ninitialState.mainPosts.concat(\n    Array(20).fill().map(() => ({\n        id: shortId.generate(),\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.paragraph(),\n        Images: [{\n            src: faker.image.image(),\n        }],\n        Comments: [{\n            User: {\n                id: shortId.generate(),\n                nickname: faker.name.findName(),\n            },\n            content: faker.lorem.sentence(),\n        }],\n    })),\n);\n\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n});\n\n//-------------------------------------------- 액션\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //-------------------------------------- ADD_POST\n            case ADD_POST_REQUEST:\n                    draft.addPostLoading = true;\n                    draft.addPostDone = false;\n                    draft.addPostError = null;\n                    break;\n            case ADD_POST_SUCCESS:\n                    draft.addPostLoading = false;\n                    draft.addPostDone = true;\n                    draft.mainPosts.unshift(dummyPost(action.data));\n                    break;\n            case ADD_POST_FAILURE:\n                    draft.addPostLoading = false;\n                    draft.addPostError = action.error;\n                    break;\n            //-------------------------------------- REMOVE_POST\n            case REMOVE_POST_REQUEST:\n                    draft.removePostLoading = true;\n                    draft.removePostDone = false;\n                    draft.removePostError = null;\n                    break;\n            case REMOVE_POST_SUCCESS:\n                    draft.removePostLoading = false;\n                    draft.removePostDone = true;\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                    break;\n            case REMOVE_POST_FAILURE:\n                    draft.removePostLoading = false;\n                    draft.removePostError = action.error;\n                    break;\n            //-------------------------------------- ADD_COMMENT\n            case ADD_COMMENT_REQUEST:\n                    draft.addCommentLoading = true;\n                    draft.addCommentDone = false;\n                    draft.addCommentError = null;\n                    break;\n            case ADD_COMMENT_SUCCESS: {\n                    const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                    post.Comments.unshift(dummyComment(action.data.content));\n                    draft.addCommentLoading = false;\n                    draft.addCommentDone = true;\n                    break;\n            }\n            case ADD_COMMENT_FAILURE:\n                    draft.addCommentLoading = false;\n                    draft.addCommentError = action.error;\n                    break;\n            default:\n                    break;\n        }\n    });\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}