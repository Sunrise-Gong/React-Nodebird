{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga'; // import thunkMiddleware from 'redux-thunk';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log('디스패치', dispatch);\n  console.log('겟스테이트', getState);\n  console.log('액션', action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, loggerMiddleware];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) // production \n  : composeWithDevTools(applyMiddleware(...middlewares)); // Development\n\n  const store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n  debug: false\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","createSagaMiddleware","reducer","rootSaga","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","sagaMiddleware","middlewares","enhancer","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,oBAAP,MAAiC,YAAjC,C,CACA;;AAEA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6BC,IAAD,IAAWC,MAAD,IAAY;AACvEC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBL,QAApB;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBJ,QAArB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBF,MAAlB;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CALD;;AAOA,MAAMG,cAAc,GAAG,MAAM;AACzB,QAAMC,cAAc,GAAGX,oBAAoB,EAA3C;AAEA,QAAMY,WAAW,GAAG,CAACD,cAAD,EAAiBR,gBAAjB,CAApB;AAEA,QAAMU,QAAQ,GAAG,OACfhB,OAAO,CAACD,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CADQ,CAC0B;AAD1B,IAEfb,mBAAmB,CAACH,eAAe,CAAC,GAAGgB,WAAJ,CAAhB,CAFrB,CALyB,CAO+B;;AAExD,QAAME,KAAK,GAAGhB,WAAW,CAACG,OAAD,EAAUY,QAAV,CAAzB;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBJ,cAAc,CAACK,GAAf,CAAmBd,QAAnB,CAAjB;AAEA,SAAOY,KAAP;AACH,CAdD;;AAgBA,MAAMG,OAAO,GAAGtB,aAAa,CAACe,cAAD,EAAiB;AAC1C;AACAQ,EAAAA,KAAK;AAFqC,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n// import thunkMiddleware from 'redux-thunk';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst loggerMiddleware = ({ dispatch, getState }) => (next) => (action) => {\n    console.log('디스패치', dispatch);\n    console.log('겟스테이트', getState);\n    console.log('액션', action);\n    return next(action);\n};\n\nconst configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n\n    const middlewares = [sagaMiddleware, loggerMiddleware];\n\n    const enhancer = process.env.NODE_ENV === 'production' \n    ? compose(applyMiddleware(...middlewares)) // production \n    : composeWithDevTools(applyMiddleware(...middlewares)); // Development\n    \n    const store = createStore(reducer, enhancer);\n\n    store.sagaTask = sagaMiddleware.run(rootSaga);\n    \n    return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n    //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n    debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}