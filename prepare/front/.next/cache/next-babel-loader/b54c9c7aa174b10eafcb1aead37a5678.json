{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/user/[id].js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n// 특정 사용자의 게시글을 모두 가져오는\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { Card, Avatar } from 'antd';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\n\nvar User = function User() {\n  _s();\n\n  var dispatch = useDispatch();\n  var router = useRouter();\n  var id = router.query.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      userInfo = _useSelector.userInfo;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading;\n\n  useEffect(function () {\n    var onScroll = function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id,\n            data: id\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, userInfo && __jsx(Head, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: \"\".concat(userInfo.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://nodebird.com/favicon.ico\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: \"https://nodebird.com/user/\".concat(id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  })), userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 43\n      }\n    }), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 49\n      }\n    }), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 48\n      }\n    }), userInfo.Followers)],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 33\n      }\n    }, userInfo.nickname[0]),\n    title: userInfo.nickname,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })) : null, mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 38\n      }\n    });\n  }));\n};\n\n_s(User, \"vuPCMAHcy42H79KMujS6N4dS5GI=\", false, function () {\n  return [useDispatch, useRouter, useSelector, useSelector];\n});\n\n_c = User;\nexport var __N_SSP = true;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Head","useRouter","Card","Avatar","AppLayout","PostCard","LOAD_USER_POSTS_REQUEST","User","dispatch","router","id","query","state","user","userInfo","post","mainPosts","hasMorePosts","loadPostsLoading","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","type","lastId","length","data","addEventListener","removeEventListener","nickname","Posts","Followings","Followers","map"],"mappings":"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","sourcesContent":["// 특정 사용자의 게시글을 모두 가져오는\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { END } from 'redux-saga';\nimport { Card, Avatar } from 'antd';\nimport axios from 'axios';\n\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport wrapper from '../../store/configureStore';\n\nconst User = () => {\n    const dispatch = useDispatch();\n    const router = useRouter();\n    const { id } = router.query;\n\n    const { userInfo } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\n\n    useEffect(() => {\n        const onScroll = () => {\n            if (window.pageYOffset\n                + document.documentElement.clientHeight\n                > document.documentElement.scrollHeight - 300) {\n                if (hasMorePosts && !loadPostsLoading) {\n                    dispatch({\n                        type: LOAD_USER_POSTS_REQUEST, lastId: mainPosts[mainPosts.length - 1]?.id, data: id,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('scroll', onScroll);\n\n        return () => { window.removeEventListener('scroll', onScroll); };\n    }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n\n    return (\n        <AppLayout>\n            {userInfo && (\n                <Head>\n                    <title>{userInfo.nickname}님의 글</title>\n                    <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\n                    <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\n                    <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\n                    <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\n                    <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\n                </Head>\n            )}\n            {userInfo ? (\n                <Card\n                    actions={[\n                        <div key=\"twit\">짹짹<br />{userInfo.Posts}</div>,\n                        <div key=\"following\">팔로잉<br />{userInfo.Followings}</div>,\n                        <div key=\"follower\">팔로워<br />{userInfo.Followers}</div>,\n                    ]}>\n                    <Card.Meta\n                        avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n                        title={userInfo.nickname} />\n                </Card>\n            )\n                : null}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n        </AppLayout>\n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) { axios.defaults.headers.Cookie = cookie; }\n\n    context.store.dispatch({ type: LOAD_USER_POSTS_REQUEST, data: context.params.id });\n    context.store.dispatch({ type: LOAD_MY_INFO_REQUEST });\n    context.store.dispatch({ type: LOAD_USER_REQUEST });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n});\n\nexport default User;"]},"metadata":{},"sourceType":"module"}