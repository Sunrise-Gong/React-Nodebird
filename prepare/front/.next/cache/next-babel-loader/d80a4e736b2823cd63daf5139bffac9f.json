{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js\";\nvar __jsx = React.createElement;\n// pages > index.js 의 자식\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false); // 좋아요 버튼의 상태\n\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // 댓글창 열기 버튼의 상태\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 42\n      }\n    }),\n    actions: [// 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 27\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 27\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 38\n        }\n      }, \"\\uC218\\uC815\"), \" \", __jsx(Button, {\n        type: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 58\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 35\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post\n    /* 게시글 아이디가 필요해서 넘겨줍니다  */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    style: {\n      marginTop: 40\n    },\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 45\n        }\n      }, \" \", item.User.nickname[0], \" \"),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","Button","Card","Popover","Avatar","List","Comment","HeartTwoTone","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","useSelector","PostImages","CommentForm","PostCardContent","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","id","state","user","me","onToggleLike","prev","onToggleComment","marginBottom","Images","User","nickname","content","marginTop","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["// pages > index.js 의 자식\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd'\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\n\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\n\nconst PostCard = ({ post }) => {\n\n    const [liked, setLiked] = useState(false);// 좋아요 버튼의 상태\n    const [commentFormOpened, setCommentFormOpened] = useState(false); // 댓글창 열기 버튼의 상태\n\n    const id = useSelector((state) => state.user.me?.id);\n\n    const onToggleLike = useCallback(() => { setLiked((prev) => !prev) }, []);\n\n    const onToggleComment = useCallback(() => { setCommentFormOpened((prev) => !prev) }, []);\n\n    return (\n        <div style={{ marginBottom: 20 }}>\n            {/*------------------------------------------------------게시글 이미지, 버튼(리트윗, 좋아요, 댓글, 수정&삭제 or 신고) */}\n            <Card\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[ // 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n                    <RetweetOutlined key=\"retweet\" />,\n\n                    liked\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\n                        : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\n\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n\n                    <Popover key=\"more\" content={(\n                        <Button.Group>\n                            {id && post.User.id === id\n                                ? (<><Button>수정</Button> <Button type=\"danger\">삭제</Button></>)\n                                : <Button>신고</Button>}\n                        </Button.Group>\n                    )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n            >\n                {/*------------------------------------------------------게시글 본문(해시태그 링크화) */}\n                <Card.Meta\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n                    title={post.User.nickname}\n                    description={<PostCardContent postData={post.content} />}\n                />\n\n            </Card>\n            {/*------------------------------------------------------게시글의 댓글창(열고 닫기 구현) */}\n            {commentFormOpened && (\n                <div>\n\n                    <CommentForm post={post/* 게시글 아이디가 필요해서 넘겨줍니다  */} />\n\n                    <List\n                        style={{ marginTop: 40 }}\n                        header={`${post.Comments.length}개의 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={<Avatar> {item.User.nickname[0]} </Avatar>}\n                                    content={item.content}\n                                />\n                            </li>\n                        )}\n                    />\n                </div>\n            )}\n            {/* <CommentForm /> */}\n            {/* <Comments /> */}\n        </div>\n    )\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n    }).isRequired\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}