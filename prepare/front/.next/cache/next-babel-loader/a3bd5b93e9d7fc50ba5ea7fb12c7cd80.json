{"ast":null,"code":"import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios'; //-------------------------------------------------- LOG_IN\n\nfunction logInAPI(data) {\n  return axios.post('/api/login', data);\n}\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    /* call을 사용한 이유는?\n    fork는 비동기 함수 호출이여서 \n    여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n    call(동기 함수 호출)을 사용 한 것입니다.\n    \n    const result = logInAPI(action.data);\n    이렇게 하지 않는 이유는?\n    .next를 통해서 실행 시키면 yield 구간마다 멈추기 때문에\n    saga는 테스트할 때 엄청 편해요.\n    */\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\n\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n} //-------------------------------------------------- LOG_OUT\n\n\nfunction logOutAPI() {\n  return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS'\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","call","axios","logInAPI","data","post","logIn","action","result","type","err","response","watchLogIn","logOutAPI","logOut","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,EAA4CC,IAA5C,QAAwD,oBAAxD;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOF,KAAK,CAACG,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH;;AACD,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAACE,QAAD,EAAWI,MAAM,CAACH,IAAlB,CAAzB;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEQ,UAAMC,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEI,MAAM,CAACJ;AAFP,KAAD,CAAT;AAKH,GAnBD,CAmBE,OAAOM,GAAP,EAAY;AACV,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,gBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAUQ,UAAV,GAAuB;AACf,QAAMZ,UAAU,CAAC,gBAAD,EAAmBM,KAAnB,CAAhB;AACP,C,CAED;;;AACA,SAASO,SAAT,GAAqB;AACjB,SAAOX,KAAK,CAACG,IAAN,CAAW,aAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA,UAAMN,MAAM,GAAG,MAAMP,IAAI,CAACY,SAAD,CAAzB;AACA,UAAMf,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOC,GAAP,EAAY;AACV,UAAMX,GAAG,CAAC;AACNU,MAAAA,IAAI,EAAE,iBADA;AAENL,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUW,WAAV,GAAwB;AACpB,QAAMf,UAAU,CAAC,iBAAD,EAAoBc,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACNC,IAAI,CAACe,UAAD,CADE,EAENf,IAAI,CAACkB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, delay, put, takeLatest, call } from \"redux-saga/effects\";\nimport axios from 'axios';\n\n//-------------------------------------------------- LOG_IN\nfunction logInAPI(data) {\n    return axios.post('/api/login', data);\n}\nfunction* logIn(action) {\n    try {\n        const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n        /* call을 사용한 이유는?\n        fork는 비동기 함수 호출이여서 \n        여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n        call(동기 함수 호출)을 사용 한 것입니다.\n        \n        const result = logInAPI(action.data);\n        이렇게 하지 않는 이유는?\n        .next를 통해서 실행 시키면 yield 구간마다 멈추기 때문에\n        saga는 테스트할 때 엄청 편해요.\n        */\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\nfunction* watchLogIn() {\n        yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\nfunction logOutAPI() {\n    return axios.post('/api/logout');\n}\n\nfunction* logOut() {\n    try {\n        const result = yield call(logOutAPI)\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),   \n        fork(watchLogOut)        \n    ])\n}"]},"metadata":{},"sourceType":"module"}