{"ast":null,"code":"import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\n\nimport axios from 'axios'; //--------------------------------------------------LOG_IN\n\nfunction logInAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logIn() {\n  try {\n    const result = yield call(logInAPI);\n    /* call을 사용한 이유는?\n    fork는 비동기 함수 호출이여서 \n    여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n    call(동기 함수 호출)을 사용 한 것입니다.\n    */\n\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield take('LOG_IN_REQUEST', logIn); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n} //--------------------------------------------------LOG_OUT\n\n\nfunction logOutAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* logOut() {\n  try {\n    const result = yield call(logOutAPI);\n    yield put({\n      type: 'LOG_OUT_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogout() {\n  yield take('LOG_OUT_REQUEST', logOut);\n} //--------------------------------------------------ADD_POST\n\n\nfunction addPostAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI);\n    yield put({\n      type: 'ADD_POST_SUCCESS',\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'ADD_POST_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST_REQUEST', addPost);\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/index.js"],"names":["all","call","fork","put","take","axios","logInAPI","post","logIn","result","type","data","err","response","watchLogin","logOutAPI","logOut","watchLogout","addPostAPI","addPost","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAAiE;;AACjE,OAAOC,KAAP,MAAkB,OAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAChB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMR,IAAI,CAACK,QAAD,CAAzB;AACA;AACR;AACA;AACA;AACA;;AAEQ,UAAMH,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAKH,GAbD,CAaE,OAAOC,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUG,UAAV,GAAuB;AACnB,QAAMV,IAAI,CAAC,gBAAD,EAAmBI,KAAnB,CAAV,CADmB,CACkB;AACxC,C,CAED;;;AACA,SAASO,SAAT,GAAqB;AACjB,SAAOV,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUS,MAAV,GAAmB;AACf,MAAI;AACA,UAAMP,MAAM,GAAG,MAAMR,IAAI,CAACc,SAAD,CAAzB;AAEA,UAAMZ,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAKH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUM,WAAV,GAAwB;AACpB,QAAMb,IAAI,CAAC,iBAAD,EAAoBY,MAApB,CAAV;AACH,C,CAED;;;AACA,SAASE,UAAT,GAAsB;AAClB,SAAOb,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUY,OAAV,GAAoB;AAChB,MAAI;AACA,UAAMV,MAAM,GAAG,MAAMR,IAAI,CAACiB,UAAD,CAAzB;AAEA,UAAMf,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,kBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAKH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMT,GAAG,CAAC;AACNO,MAAAA,IAAI,EAAE,kBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUS,YAAV,GAAyB;AACrB,QAAMhB,IAAI,CAAC,kBAAD,EAAqBe,OAArB,CAAV;AACH;;AAGD,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMrB,GAAG,CAAC,CACNE,IAAI,CAACY,UAAD,CADE,EAENZ,IAAI,CAACe,WAAD,CAFE,EAGNf,IAAI,CAACkB,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\nimport axios from 'axios';\n\n//--------------------------------------------------LOG_IN\nfunction logInAPI() {\n    return axios.post('/api/login');\n}\n\nfunction* logIn() {\n    try {\n        const result = yield call(logInAPI)\n        /* call을 사용한 이유는?\n        fork는 비동기 함수 호출이여서 \n        여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n        call(동기 함수 호출)을 사용 한 것입니다.\n        */\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\n//--------------------------------------------------LOG_OUT\nfunction logOutAPI() {\n    return axios.post('/api/login');\n}\n\nfunction* logOut() {\n    try {\n        const result = yield call(logOutAPI)\n\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogout() {\n    yield take('LOG_OUT_REQUEST', logOut);\n}\n\n//--------------------------------------------------ADD_POST\nfunction addPostAPI() {\n    return axios.post('/api/login');\n}\n\nfunction* addPost() {\n    try {\n        const result = yield call(addPostAPI)\n\n        yield put({\n            type: 'ADD_POST_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'ADD_POST_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST', addPost);\n}\n\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}