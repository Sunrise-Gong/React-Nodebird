{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga'; // import thunkMiddleware from 'redux-thunk';\n\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nvar loggerMiddleware = function loggerMiddleware(_ref) {\n  var dispatch = _ref.dispatch,\n      getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      console.log('디스패치', dispatch);\n      console.log('겟스테이트', getState);\n      console.log('액션', action);\n      return next(action);\n    };\n  };\n};\n\nvar configureStore = function configureStore() {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, loggerMiddleware];\n  var enhancer = true ? compose(applyMiddleware.apply(void 0, middlewares)) // production \n  : composeWithDevTools(applyMiddleware.apply(void 0, middlewares)); // Development\n\n  var store = createStore(reducer, enhancer);\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\n\nvar wrapper = createWrapper(configureStore, {\n  //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n  debug: false\n});\nexport default wrapper;","map":null,"metadata":{},"sourceType":"module"}