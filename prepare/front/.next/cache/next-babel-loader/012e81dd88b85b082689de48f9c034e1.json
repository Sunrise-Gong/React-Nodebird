{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, fork, put, delay, call, throttle } from 'redux-saga/effects'; //import shortId from 'shortid';\n\nimport axios from 'axios';\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE //generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- RETWEET\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //-------------------------------------------------- UPLOAD_IMAGES\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\n\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //-------------------------------------------------- LIKE_POST\n\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //-------------------------------------------------- UNLIKE_POST\n\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //-------------------------------------------------- LOAD_POST\n\n\nfunction loadPostAPI(data) {\n  return axios.get(\"/post/\".concat(data));\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadPostAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} //-------------------------------------------------- LOAD_USER_POSTS (특정 유저의 게시글들)\n\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 13;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          console.error(_context11.t0);\n          _context11.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} //-------------------------------------------------- LOAD_HASHTAG_POSTS (특정 해시태그의 게시글들)\n\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(data, \"?lastId=\").concat(lastId || 0));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context13.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} //-------------------------------------------------- LOAD_POSTS (게시글들)\n\n\nfunction loadPostsAPI(lastId) {\n  return axios.get(\"/posts?lastId=\".concat(lastId || 0));\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(loadPostsAPI, action.lastId);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context15.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context17.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context17.next = 15;\n          break;\n\n        case 10:\n          _context17.prev = 10;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 15;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context17.t0.response.data\n          });\n\n        case 15:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n} //-------------------------------------------------- REMOVE_POST\n\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context19.next = 8;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context19.next = 10;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 10:\n          _context19.next = 17;\n          break;\n\n        case 12:\n          _context19.prev = 12;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 17;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context19.t0.response.data\n          });\n\n        case 17:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 12]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n} //-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.prev = 0;\n          _context21.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context21.sent;\n          _context21.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context21.next = 13;\n          break;\n\n        case 8:\n          _context21.prev = 8;\n          _context21.t0 = _context21[\"catch\"](0);\n          console.error(_context21.t0);\n          _context21.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context21.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPost), fork(watchLoadPosts), fork(watchLoadUserPosts), fork(watchLoadHashtagPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["retweet","watchRetweet","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","loadPost","watchLoadPost","loadUserPosts","watchLoadUserPosts","loadHashtagPosts","watchLoadHashtagPosts","loadPosts","watchLoadPosts","addPost","watchAddPost","removePost","watchRemovePost","addComment","watchAddComment","postSaga","all","takeLatest","fork","put","delay","call","throttle","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","action","result","type","console","error","response","uploadImagesAPI","likePostAPI","patch","unlikePostAPI","loadPostAPI","get","loadUserPostsAPI","lastId","loadHashtagPostsAPI","loadPostsAPI","addPostAPI","id","removePostAPI","addCommentAPI","postId"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call, throttle } from 'redux-saga/effects';\n//import shortId from 'shortid';\nimport axios from 'axios';\n\nimport {\n    LIKE_POST_REQUEST, \n    LIKE_POST_SUCCESS, \n    LIKE_POST_FAILURE,\n    \n    UNLIKE_POST_REQUEST, \n    UNLIKE_POST_SUCCESS, \n    UNLIKE_POST_FAILURE,\n    \n    LOAD_POSTS_REQUEST,\n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    LOAD_USER_POSTS_REQUEST,\n    LOAD_USER_POSTS_SUCCESS, \n    LOAD_USER_POSTS_FAILURE,\n\n    LOAD_HASHTAG_POSTS_REQUEST,\n    LOAD_HASHTAG_POSTS_SUCCESS, \n    LOAD_HASHTAG_POSTS_FAILURE,\n    \n    LOAD_POST_REQUEST,\n    LOAD_POST_SUCCESS, \n    LOAD_POST_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n\n    UPLOAD_IMAGES_REQUEST,\n    UPLOAD_IMAGES_SUCCESS,\n    UPLOAD_IMAGES_FAILURE,\n    \n    RETWEET_REQUEST,\n    RETWEET_SUCCESS,\n    RETWEET_FAILURE,\n    //generateDummyPost,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- RETWEET\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\nfunction retweetAPI(data) { return axios.post(`/post/${data}/retweet`); } \n\nfunction* retweet(action) {\n    try {\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: RETWEET_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRetweet() { yield takeLatest(RETWEET_REQUEST, retweet); }\n\n//-------------------------------------------------- UPLOAD_IMAGES\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\nfunction uploadImagesAPI(data) { return axios.post('/post/images', data); } \n\nfunction* uploadImages(action) {\n    try {\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchUploadImages() { yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages); }\n\n//-------------------------------------------------- LIKE_POST\nfunction likePostAPI(data) { return axios.patch(`/post/${data}/like`); }\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLikePost() { yield takeLatest(LIKE_POST_REQUEST, likePost); }\n\n//-------------------------------------------------- UNLIKE_POST\nfunction unlikePostAPI(data) { return axios.delete(`/post/${data}/like`); }\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchUnlikePost() { yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); }\n\n//-------------------------------------------------- LOAD_POST\nfunction loadPostAPI(data) { return axios.get(`/post/${data}`); }\n\nfunction* loadPost(action) {\n    try {\n        const result = yield call(loadPostAPI, action.data);\n\n        yield put({ \n            type: LOAD_POST_SUCCESS, \n            data: result.data, \n        });\n    } catch (err) {\n        console.error(err);\n        yield put({ \n            type: LOAD_POST_FAILURE, \n            error: err.response.data, \n        });\n    }\n}\n\nfunction* watchLoadPost() { yield takeLatest(LOAD_POST_REQUEST, loadPost); }\n\n//-------------------------------------------------- LOAD_USER_POSTS (특정 유저의 게시글들)\nfunction loadUserPostsAPI(data, lastId) { return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); }\n\nfunction* loadUserPosts(action) {\n    try {\n        const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadUserPosts() {\n    yield throttle(5000, LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\n//-------------------------------------------------- LOAD_HASHTAG_POSTS (특정 해시태그의 게시글들)\nfunction loadHashtagPostsAPI(data, lastId) { return axios.get(`/hashtag/${data}?lastId=${lastId || 0}`); }\n\nfunction* loadHashtagPosts(action) {\n    try {\n        const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadHashtagPosts() {\n    yield throttle(5000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\n//-------------------------------------------------- LOAD_POSTS (게시글들)\nfunction loadPostsAPI(lastId) { return axios.get(`/posts?lastId=${lastId || 0}`); }\n\nfunction* loadPosts(action) {\n    try {\n        const result = yield call(loadPostsAPI, action.lastId);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    // yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) { return axios.post('/post', data); }\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\nfunction removePostAPI(data) { return axios.delete(`/post/${data}`); }\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \nfunction addCommentAPI(data) { \n    return axios.post(`/post/${data.postId}/comment`, data); \n} \n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchRetweet),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchLoadPost),\n        fork(watchLoadPosts),\n        fork(watchLoadUserPosts),\n        fork(watchLoadHashtagPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}