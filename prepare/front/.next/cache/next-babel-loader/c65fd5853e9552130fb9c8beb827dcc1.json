{"ast":null,"code":"import { all, takeLatest, fork, put, delay } from 'redux-saga/effects';\nimport shortId from 'shortid'; //import axios from 'axios';\n\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- LOAD_POST\n// function loadPostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* loadPost() {\n  try {\n    //const result = yield call(loadPostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: LOAD_POSTS_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n} //-------------------------------------------------- ADD_POST\n// function addPostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\n\nfunction* addPost(action) {\n  try {\n    //const result = yield call(addPostAPI, action.data)\n    yield delay(1000);\n    const id = shortId.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      }\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //-------------------------------------------------- ADD_COMMENT\n// function addCommentAPI(data) {\n//     return axios.post(`/api/post/${data.postId}/comment`, data);\n// }\n\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadPost), fork(watchAddPost), fork(watchRemovePost), fork(watchAddComment)]);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["all","takeLatest","fork","put","delay","shortId","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPost","type","err","data","response","watchLoadPost","addPost","action","id","generate","content","watchAddPost","removePost","watchRemovePost","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay } from 'redux-saga/effects';\nimport shortId from 'shortid';\n//import axios from 'axios';\n\nimport {\n    LOAD_POSTS_REQUEST, \n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- LOAD_POST\n// function loadPostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* loadPost() {\n    try {\n        //const result = yield call(loadPostAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPost() {\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPost);\n}\n\n//-------------------------------------------------- ADD_POST\n// function addPostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* addPost(action) {\n    try {\n        //const result = yield call(addPostAPI, action.data)\n        yield delay(1000);\n        const id = shortId.generate();\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: {\n                id,\n                content: action.data,\n            },\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* removePost(action) {\n    try {\n        //const result = yield call(removePostAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n // function addCommentAPI(data) {\n//     return axios.post(`/api/post/${data.postId}/comment`, data);\n// }\n\nfunction* addComment(action) {\n    try {\n        // const result = yield call(addCommentAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchLoadPost),\n        fork(watchAddPost),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}