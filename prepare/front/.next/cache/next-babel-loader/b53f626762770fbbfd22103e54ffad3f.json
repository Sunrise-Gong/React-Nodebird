{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/CommentForm.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n// PostCard.js 의 자식. 댓글창 컴포넌트.\nimport React, { useCallback, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post'; //----------------------------------------\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useInput = useInput(''),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText('');\n    }\n  }, [addCommentDone]); //----------------------------------------\n\n  var onSubmitComment = useCallback(function () {\n    console.log(post.id, commentText, id);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText]); //----------------------------------------\n\n  return __jsx(Form, {\n    onFinish: onSubmitComment,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, __jsx(Form.Item, {\n    style: {\n      position: 'relative',\n      margin: 0\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(Input.TextArea, {\n    value: commentText,\n    onChange: onChangeCommentText,\n    rows: 5,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    style: {\n      position: 'absolute',\n      right: 0,\n      bottom: -35,\n      zIndex: 1\n    },\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: addCommentLoading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, \"\\uC090\\uC57D\")));\n};\n\n_s(CommentForm, \"uF1jqHkkXk4tcxRy8b/hOvUlZfg=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useInput];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/CommentForm.js"],"names":["React","useCallback","useEffect","Button","Form","Input","PropTypes","useInput","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","dispatch","state","addCommentDone","addCommentLoading","id","user","me","commentText","onChangeCommentText","setCommentText","onSubmitComment","console","log","type","data","content","postId","userId","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["// PostCard.js 의 자식. 댓글창 컴포넌트.\nimport React, { useCallback, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport PropTypes from 'prop-types';\n\nimport useInput from '../hooks/useInput';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\n//----------------------------------------\nconst CommentForm = ({ post }) => {\n    const dispatch = useDispatch();\n    \n    const { addCommentDone, addCommentLoading } = useSelector((state) => state.post);\n    const id = useSelector((state) => state.user.me?.id);\n    \n    const [commentText, onChangeCommentText, setCommentText] = useInput('');\n    \n    useEffect(() => {\n        if (addCommentDone) { setCommentText(''); }\n    }, [addCommentDone]);\n\n//----------------------------------------\n    const onSubmitComment = useCallback(() => {\n        console.log(post.id, commentText, id);\n        dispatch({\n            type: ADD_COMMENT_REQUEST,\n            data: { content: commentText, postId: post.id, userId: id },\n        });\n    }, [commentText]);\n//----------------------------------------\n    return (\n        <Form onFinish={onSubmitComment}>\n\n            <Form.Item style={{ position: 'relative', margin: 0 }}>\n\n                <Input.TextArea\n                    value={commentText}\n                    onChange={onChangeCommentText}\n                    rows={5} />\n\n                <Button\n                    style={{ position: 'absolute', right: 0, bottom: -35, zIndex: 1 }}\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    loading={addCommentLoading}>\n                    삐약\n                </Button>\n\n            </Form.Item>\n\n        </Form>\n    );\n};\n\nCommentForm.propTypes = {\n    post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}