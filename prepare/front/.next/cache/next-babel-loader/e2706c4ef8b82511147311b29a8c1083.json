{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n};\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10)); //-------------------------------------------- ADD_POST에 사용될 더미데이터\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    }\n  };\n}; //-------------------------------------------- 액션\n\n\nexport var LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport var LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport var LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      //-------------------------------------- LOAD_POST\n      case LOAD_POST_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POST_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        break;\n\n      case LOAD_POST_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      //-------------------------------------- ADD_POST\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.postId;\n          });\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","dummyPost","data","dummyComment","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","reducer","state","action","draft","error","unshift","filter","v","post","find","postId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n    mainPosts: [],\n    imagePaths: [], // 이미지 업로드시 경로 저장\n    \n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    \n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    \n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null, \n};\n\n//-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n        \n    id: shortId.generate(),\n    \n    User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n    },\n    \n    content: faker.lorem.paragraph(),\n    \n    Images: [{ src: faker.image.image() }],\n    \n    Comments: [{\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n    }],\n\n}));\n\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n});\n\n//-------------------------------------------- 액션\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //-------------------------------------- LOAD_POST\n            case LOAD_POST_REQUEST:\n                    draft.loadPostsLoading = true;\n                    draft.loadPostsDone = false;\n                    draft.loadPostsError = null;\n                    break;\n            case LOAD_POST_SUCCESS:\n                    draft.loadPostsLoading = false;\n                    draft.loadPostsDone = true;\n                    draft.mainPosts = action.data.concat(draft.mainPosts);\n                    break;\n            case LOAD_POST_FAILURE:\n                    draft.loadPostsLoading = false;\n                    draft.loadPostsError = action.error;\n                    break;\n            //-------------------------------------- ADD_POST\n            case ADD_POST_REQUEST:\n                    draft.addPostLoading = true;\n                    draft.addPostDone = false;\n                    draft.addPostError = null;\n                    break;\n            case ADD_POST_SUCCESS:\n                    draft.addPostLoading = false;\n                    draft.addPostDone = true;\n                    draft.mainPosts.unshift(dummyPost(action.data));\n                    break;\n            case ADD_POST_FAILURE:\n                    draft.addPostLoading = false;\n                    draft.addPostError = action.error;\n                    break;\n            //-------------------------------------- REMOVE_POST\n            case REMOVE_POST_REQUEST:\n                    draft.removePostLoading = true;\n                    draft.removePostDone = false;\n                    draft.removePostError = null;\n                    break;\n            case REMOVE_POST_SUCCESS:\n                    draft.removePostLoading = false;\n                    draft.removePostDone = true;\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                    break;\n            case REMOVE_POST_FAILURE:\n                    draft.removePostLoading = false;\n                    draft.removePostError = action.error;\n                    break;\n            //-------------------------------------- ADD_COMMENT\n            case ADD_COMMENT_REQUEST:\n                    draft.addCommentLoading = true;\n                    draft.addCommentDone = false;\n                    draft.addCommentError = null;\n                    break;\n            case ADD_COMMENT_SUCCESS: {\n                    const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                    post.Comments.unshift(dummyComment(action.data.content));\n                    draft.addCommentLoading = false;\n                    draft.addCommentDone = true;\n                    break;\n            }\n            case ADD_COMMENT_FAILURE:\n                    draft.addCommentLoading = false;\n                    draft.addCommentError = action.error;\n                    break;\n            default:\n                    break;\n        }\n    });\n};\n\nexport default reducer;\n\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/"]},"metadata":{},"sourceType":"module"}