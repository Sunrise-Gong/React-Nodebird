{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar } from 'antd';\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport PostImages from '../components/PostImages';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false); //const id = useSelector((state) => state.user.me && state.user.me.id);\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 42\n      }\n    }),\n    actions: [// 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 21\n      }\n    }), __jsx(HeartOutlined, {\n      key: \"heart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 21\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 25\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 29\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 29\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 31\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }\n    }, \";\", __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 25\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 26\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","PropTypes","Button","Card","Popover","Avatar","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","useSelector","PostImages","PostCard","post","liked","setLiked","id","state","user","me","marginBottom","Images","User","nickname","content","propTypes","shape","number","object","string","createdAt","Comments","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React,{ useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar } from 'antd'\nimport { EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\n\nimport PostImages from '../components/PostImages';\n\nconst PostCard = ({ post }) => {\n\n    const [liked, setLiked] = useState(false);\n    //const id = useSelector((state) => state.user.me && state.user.me.id);\n    const id = useSelector((state) => state.user.me?.id);\n    return (\n        <div style={{ marginBottom: 20 }}>\n            <Card\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[ // 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n                    <RetweetOutlined key=\"retweet\" />,\n                    <HeartOutlined key=\"heart\" />,\n                    <MessageOutlined key=\"comment\"/>,\n                    \n                    <Popover key=\"more\" content={(\n                        <Button.Group>\n                            { id && post.User.id === id ? (\n                            <>\n                            <Button>수정</Button>\n                            <Button type=\"danger\">삭제</Button>\n                            </>\n                            ):<Button>신고</Button> }\n                        </Button.Group>\n                    )}>;\n\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n            >\n                <Card.Meta\n                avatar={ <Avatar>{ post.User.nickname[0] }</Avatar> }\n                title={ post.User.nickname }\n                description={ post.content }\n                />\n            </Card>\n            {/* <CommentForm /> */}\n            {/* <Comments /> */}\n        </div>\n    )\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n    }).isRequired\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}