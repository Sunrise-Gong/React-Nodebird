{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostForm.js\";\nvar __jsx = React.createElement;\nimport React, { useCallback, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addPost, UPLOAD_IMAGES_REQUEST } from '../reducers/post'; //액션\n\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const [text, onChangeText, setText] = useInput(''); //------------------------------------------------ 작성한 글이 업로드 성공시 인풋창 비우기\n\n  useEffect(() => {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]); //------------------------------------------------ 이미지 업로드 버튼 클릭\n\n  const imageInput = useRef();\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.file, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST\n    });\n  }, []); //------------------------------------------------ 게시글 등록버튼 클릭\n\n  const onSubmit = useCallback(() => {\n    dispatch(addPost(text)); // setText(''); 여기서 지워졌는데 에러가 나면 작성한 글이 날아갈 수 있기 때문에 useEffect로..\n  }, [text]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20 px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, __jsx(Input.TextArea, {\n    value: text,\n    onChange: onChangeText,\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  }), __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }), __jsx(Button, {\n    onClick: onClickImageUpload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, imagePaths.map(v => {\n    // 이미지 업로드 미리보기 부분\n    __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: v,\n      style: {\n        width: '200px'\n      },\n      alt: v,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }, __jsx(Button, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 29\n      }\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostForm.js"],"names":["React","useCallback","useRef","useEffect","Button","Form","Input","useDispatch","useSelector","addPost","UPLOAD_IMAGES_REQUEST","useInput","PostForm","imagePaths","addPostDone","state","post","dispatch","text","onChangeText","setText","imageInput","onClickImageUpload","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","file","f","append","type","onSubmit","margin","marginBottom","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addPost, UPLOAD_IMAGES_REQUEST } from '../reducers/post';//액션\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\n    const dispatch = useDispatch();\n    const [text, onChangeText, setText] = useInput('');\n//------------------------------------------------ 작성한 글이 업로드 성공시 인풋창 비우기\n    \n    useEffect(() => { if (addPostDone) { setText(''); } }, [addPostDone]);\n\n//------------------------------------------------ 이미지 업로드 버튼 클릭\n    const imageInput = useRef();\n    const onClickImageUpload = useCallback(() => {\n        imageInput.current.click();\n    }, [imageInput.current]);\n\n    const onChangeImages = useCallback((e) => {\n        console.log('images', e.target.files);\n        const imageFormData = new FormData();\n        [].forEach.call(e.target.file, (f) => {\n            imageFormData.append('image', f);\n        });\n        dispatch({\n            type: UPLOAD_IMAGES_REQUEST,\n        });\n    }, []);\n//------------------------------------------------ 게시글 등록버튼 클릭\n    const onSubmit = useCallback(() => {\n        dispatch(addPost(text));\n        // setText(''); 여기서 지워졌는데 에러가 나면 작성한 글이 날아갈 수 있기 때문에 useEffect로..\n    }, [text]);\n\n    return (\n        <Form\n            style={{ margin: '10px 0 20 px' }}\n            encType=\"multipart/form-data\"\n            onFinish={onSubmit}>\n{/* --------------------------------------------- 게시글 작성창 */}\n            <Input.TextArea\n                value={text}\n                onChange={onChangeText}\n                maxLength={140}\n                placeholder=\"어떤 신기한 일이 있었나요?\" />\n{/* --------------------------------------------- 이미지 or 게시글 등록 버튼 */}\n            <div style={{ marginBottom: 20 }}>\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n                <Button\n                    type=\"primary\"\n                    style={{ float: 'right' }}\n                    htmlType=\"submit\">\n                    짹짹\n                </Button>\n            </div>\n\n            <div>\n                {imagePaths.map((v) => { // 이미지 업로드 미리보기 부분\n                    <div key={v} style={{ display: 'inline-block' }}>\n                        <img src={v} style={{ width: '200px' }} alt={v} />\n                        <div>\n                            <Button>제거</Button>\n                        </div>\n                    </div>;\n                })}\n            </div>\n        </Form>\n    );\n};\n\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}