{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from 'shortid';\nimport produce from 'immer';\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    },\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n    Images: [{\n      id: shortId.generate(),\n      src: 'https://bit.ly/34S7zRp'\n    }, {\n      id: shortId.generate(),\n      src: 'https://bit.ly/3uX6IJH'\n    }, {\n      id: shortId.generate(),\n      src: 'https://bit.ly/2TDFv1w'\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: '재원'\n      },\n      content: '키보드 윤활해야지~'\n    }, {\n      User: {\n        id: shortId.generate(),\n        nickname: '선범'\n      },\n      content: '여친이랑 산에 가야지~'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //-------------------------------------------- ADD_POST에 사용될 더미데이터\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '해돋이'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '해돋이'\n  }\n}); //-------------------------------------------- 액션\n\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      //-------------------------------------- ADD_POST\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: [dummyPost(action.data), ...state.mainPosts],\n          addPostLoading: false,\n          addPostDone: true\n        });\n\n      case ADD_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addPostLoading: false,\n          addPostError: action.error\n        });\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: true,\n          removePostDone: false,\n          removePostError: null\n        });\n\n      case REMOVE_POST_SUCCESS:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: state.mainPosts.filter(v => v.id !== action.data),\n          // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n          removePostLoading: false,\n          removePostDone: true\n        });\n\n      case REMOVE_POST_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          removePostLoading: false,\n          removePostError: action.error\n        });\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: true,\n          addCommentDone: false,\n          addCommentError: null\n        });\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n          const post = _objectSpread({}, state.mainPosts[postIndex]);\n\n          post.Comments = [dummyComment(action.data.content), ...post.Comments];\n          const mainPosts = [...state.mainPosts];\n          mainPosts[postIndex] = post;\n          return _objectSpread(_objectSpread({}, state), {}, {\n            mainPosts,\n            addCommentLoading: false,\n            addCommentDone: true\n          });\n        }\n\n      case ADD_COMMENT_FAILURE:\n        return _objectSpread(_objectSpread({}, state), {}, {\n          addCommentLoading: false,\n          addCommentError: action.error\n        });\n\n      default:\n        return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","reducer","state","action","draft","error","filter","v","postIndex","findIndex","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\n\nexport const initialState = {\n    mainPosts: [\n        {\n            id: 1,\n\n            User: { id: 1, nickname: '해돋이' },\n\n            content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n            Images: [\n                { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n                { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n                { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n            ],\n\n            Comments: [\n                { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n                { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n            ],\n        },\n    ],\n    imagePaths: [], // 이미지 업로드시 경로 저장\n    \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    \n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    \n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null, \n};\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n});\n\n//-------------------------------------------- 액션\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //-------------------------------------- ADD_POST\n            case ADD_POST_REQUEST:\n                    draft.addPostLoading = true;\n                    draft.addPostDone = false;\n                    draft.addPostError = null;\n                    break;\n            case ADD_POST_SUCCESS:\n                return {\n                    ...state,\n                    mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                    addPostLoading: false,\n                    addPostDone: true,\n                };\n            case ADD_POST_FAILURE:\n                return {\n                    ...state,\n                    addPostLoading: false,\n                    addPostError: action.error,\n                };\n            //-------------------------------------- REMOVE_POST\n            case REMOVE_POST_REQUEST:\n                return {\n                    ...state,\n                    removePostLoading: true,\n                    removePostDone: false,\n                    removePostError: null,\n                };\n            case REMOVE_POST_SUCCESS:\n                return {\n                    ...state,\n                    mainPosts: state.mainPosts.filter((v) => v.id !== action.data), // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                    removePostLoading: false,\n                    removePostDone: true,\n                };\n            case REMOVE_POST_FAILURE:\n                return {\n                    ...state,\n                    removePostLoading: false,\n                    removePostError: action.error,\n                };\n            //-------------------------------------- ADD_COMMENT\n            case ADD_COMMENT_REQUEST:\n                return {\n                    ...state,\n                    addCommentLoading: true,\n                    addCommentDone: false,\n                    addCommentError: null,\n                };\n            case ADD_COMMENT_SUCCESS: {\n                const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId); \n                const post = { ...state.mainPosts[postIndex] }; \n                post.Comments = [dummyComment(action.data.content), ...post.Comments]; \n                const mainPosts = [...state.mainPosts];\n                mainPosts[postIndex] = post;\n                return {\n                    ...state,\n                    mainPosts,\n                    addCommentLoading: false,\n                    addCommentDone: true,\n                };\n            }\n            case ADD_COMMENT_FAILURE:\n                return {\n                    ...state,\n                    addCommentLoading: false,\n                    addCommentError: action.error,\n                };\n            default:\n                return state;\n        }\n    });\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}