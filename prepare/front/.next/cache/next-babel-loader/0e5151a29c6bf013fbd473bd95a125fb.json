{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport const initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\nexport const generateDummyPost = number => Array(number).fill().map(() => ({\n  id: shortId.generate(),\n  User: {\n    id: shortId.generate(),\n    nickname: faker.name.findName()\n  },\n  content: faker.lorem.paragraph(),\n  Images: [{\n    src: faker.image.image()\n  }],\n  Comments: [{\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.sentence()\n  }]\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10)); //-------------------------------------------- ADD_POST에 사용될 더미데이터\n\nconst dummyPost = data => ({\n  id: data.id,\n  content: data.content,\n  User: {\n    id: 1,\n    nickname: '해돋이'\n  },\n  Images: [],\n  Comments: []\n});\n\nconst dummyComment = data => ({\n  id: shortId.generate(),\n  content: data,\n  User: {\n    id: 1,\n    nickname: '해돋이'\n  }\n}); //-------------------------------------------- 액션\n\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      //-------------------------------------- ADD_POST\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(dummyPost(action.data));\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const post = draft.mainPosts.find(v => v.id === action.data.postId);\n          post.Comments.unshift(dummyComment(action.data.content));\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","concat","dummyPost","data","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","reducer","state","action","draft","unshift","error","filter","v","post","find","postId"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,OAAP,MAAoB,OAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,SAAS,EAAE,EADa;AAExBC,EAAAA,UAAU,EAAE,EAFY;AAER;AAEhBC,EAAAA,cAAc,EAAE,KAJQ;AAKxBC,EAAAA,WAAW,EAAE,KALW;AAMxBC,EAAAA,YAAY,EAAE,IANU;AAQxBC,EAAAA,iBAAiB,EAAE,KARK;AASxBC,EAAAA,cAAc,EAAE,KATQ;AAUxBC,EAAAA,eAAe,EAAE,IAVO;AAYxBC,EAAAA,iBAAiB,EAAE,KAZK;AAaxBC,EAAAA,cAAc,EAAE,KAbQ;AAcxBC,EAAAA,eAAe,EAAE;AAdO,CAArB,C,CAiBP;;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAYC,KAAK,CAACD,MAAD,CAAL,CAAcE,IAAd,GAAqBC,GAArB,CAAyB,OAAO;AAEzEC,EAAAA,EAAE,EAAEpB,OAAO,CAACqB,QAAR,EAFqE;AAIzEC,EAAAA,IAAI,EAAE;AACFF,IAAAA,EAAE,EAAEpB,OAAO,CAACqB,QAAR,EADF;AAEFE,IAAAA,QAAQ,EAAErB,KAAK,CAACsB,IAAN,CAAWC,QAAX;AAFR,GAJmE;AASzEC,EAAAA,OAAO,EAAExB,KAAK,CAACyB,KAAN,CAAYC,SAAZ,EATgE;AAWzEC,EAAAA,MAAM,EAAE,CAAC;AAAEC,IAAAA,GAAG,EAAE5B,KAAK,CAAC6B,KAAN,CAAYA,KAAZ;AAAP,GAAD,CAXiE;AAazEC,EAAAA,QAAQ,EAAE,CAAC;AACPV,IAAAA,IAAI,EAAE;AACFF,MAAAA,EAAE,EAAEpB,OAAO,CAACqB,QAAR,EADF;AAEFE,MAAAA,QAAQ,EAAErB,KAAK,CAACsB,IAAN,CAAWC,QAAX;AAFR,KADC;AAKPC,IAAAA,OAAO,EAAExB,KAAK,CAACyB,KAAN,CAAYM,QAAZ;AALF,GAAD;AAb+D,CAAP,CAAzB,CAAtC;AAsBP9B,YAAY,CAACC,SAAb,GAAyBD,YAAY,CAACC,SAAb,CAAuB8B,MAAvB,CAA8BnB,iBAAiB,CAAC,EAAD,CAA/C,CAAzB,C,CAEA;;AACA,MAAMoB,SAAS,GAAIC,IAAD,KAAW;AACzBhB,EAAAA,EAAE,EAAEgB,IAAI,CAAChB,EADgB;AAEzBM,EAAAA,OAAO,EAAEU,IAAI,CAACV,OAFW;AAGzBJ,EAAAA,IAAI,EAAE;AACFF,IAAAA,EAAE,EAAE,CADF;AAEFG,IAAAA,QAAQ,EAAE;AAFR,GAHmB;AAOzBM,EAAAA,MAAM,EAAE,EAPiB;AAQzBG,EAAAA,QAAQ,EAAE;AARe,CAAX,CAAlB;;AAWA,MAAMK,YAAY,GAAID,IAAD,KAAW;AAC5BhB,EAAAA,EAAE,EAAEpB,OAAO,CAACqB,QAAR,EADwB;AAE5BK,EAAAA,OAAO,EAAEU,IAFmB;AAG5Bd,EAAAA,IAAI,EAAE;AACFF,IAAAA,EAAE,EAAE,CADF;AAEFG,IAAAA,QAAQ,EAAE;AAFR;AAHsB,CAAX,CAArB,C,CASA;;;AACA,OAAO,MAAMe,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAEP;;AACA,OAAO,MAAMC,OAAO,GAAIX,IAAD,KAAW;AAC9BY,EAAAA,IAAI,EAAEV,gBADwB;AAE9BF,EAAAA;AAF8B,CAAX,CAAhB;AAKP,OAAO,MAAMa,UAAU,GAAIb,IAAD,KAAW;AACjCY,EAAAA,IAAI,EAAEJ,mBAD2B;AAEjCR,EAAAA;AAFiC,CAAX,CAAnB;;AAKP,MAAMc,OAAO,GAAG,CAACC,KAAK,GAAGhD,YAAT,EAAuBiD,MAAvB,KAAkC;AAC9C,SAAOnD,OAAO,CAACkD,KAAD,EAASE,KAAD,IAAW;AAC7B,YAAQD,MAAM,CAACJ,IAAf;AACI;AACA,WAAKV,gBAAL;AACQe,QAAAA,KAAK,CAAC/C,cAAN,GAAuB,IAAvB;AACA+C,QAAAA,KAAK,CAAC9C,WAAN,GAAoB,KAApB;AACA8C,QAAAA,KAAK,CAAC7C,YAAN,GAAqB,IAArB;AACA;;AACR,WAAK+B,gBAAL;AACQc,QAAAA,KAAK,CAAC/C,cAAN,GAAuB,KAAvB;AACA+C,QAAAA,KAAK,CAAC9C,WAAN,GAAoB,IAApB;AACA8C,QAAAA,KAAK,CAACjD,SAAN,CAAgBkD,OAAhB,CAAwBnB,SAAS,CAACiB,MAAM,CAAChB,IAAR,CAAjC;AACA;;AACR,WAAKI,gBAAL;AACQa,QAAAA,KAAK,CAAC/C,cAAN,GAAuB,KAAvB;AACA+C,QAAAA,KAAK,CAAC7C,YAAN,GAAqB4C,MAAM,CAACG,KAA5B;AACA;AACR;;AACA,WAAKd,mBAAL;AACQY,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,IAA1B;AACA4C,QAAAA,KAAK,CAAC3C,cAAN,GAAuB,KAAvB;AACA2C,QAAAA,KAAK,CAAC1C,eAAN,GAAwB,IAAxB;AACA;;AACR,WAAK+B,mBAAL;AACQW,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC3C,cAAN,GAAuB,IAAvB;AACA2C,QAAAA,KAAK,CAACjD,SAAN,GAAkBiD,KAAK,CAACjD,SAAN,CAAgBoD,MAAhB,CAAwBC,CAAD,IAAOA,CAAC,CAACrC,EAAF,KAASgC,MAAM,CAAChB,IAA9C,CAAlB,CAHR,CAG+E;;AACvE;;AACR,WAAKO,mBAAL;AACQU,QAAAA,KAAK,CAAC5C,iBAAN,GAA0B,KAA1B;AACA4C,QAAAA,KAAK,CAAC1C,eAAN,GAAwByC,MAAM,CAACG,KAA/B;AACA;AACR;;AACA,WAAKX,mBAAL;AACQS,QAAAA,KAAK,CAACzC,iBAAN,GAA0B,IAA1B;AACAyC,QAAAA,KAAK,CAACxC,cAAN,GAAuB,KAAvB;AACAwC,QAAAA,KAAK,CAACvC,eAAN,GAAwB,IAAxB;AACA;;AACR,WAAK+B,mBAAL;AAA0B;AAClB,gBAAMa,IAAI,GAAGL,KAAK,CAACjD,SAAN,CAAgBuD,IAAhB,CAAsBF,CAAD,IAAOA,CAAC,CAACrC,EAAF,KAASgC,MAAM,CAAChB,IAAP,CAAYwB,MAAjD,CAAb;AACAF,UAAAA,IAAI,CAAC1B,QAAL,CAAcsB,OAAd,CAAsBjB,YAAY,CAACe,MAAM,CAAChB,IAAP,CAAYV,OAAb,CAAlC;AACA2B,UAAAA,KAAK,CAACzC,iBAAN,GAA0B,KAA1B;AACAyC,UAAAA,KAAK,CAACxC,cAAN,GAAuB,IAAvB;AACA;AACP;;AACD,WAAKiC,mBAAL;AACQO,QAAAA,KAAK,CAACzC,iBAAN,GAA0B,KAA1B;AACAyC,QAAAA,KAAK,CAACvC,eAAN,GAAwBsC,MAAM,CAACG,KAA/B;AACA;;AACR;AACQ;AAjDZ;AAmDH,GApDa,CAAd;AAqDH,CAtDD;;AAwDA,eAAeL,OAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n    mainPosts: [],\n    imagePaths: [], // 이미지 업로드시 경로 저장\n    \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    \n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    \n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null, \n};\n\n//-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n        \n    id: shortId.generate(),\n    \n    User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n    },\n    \n    content: faker.lorem.paragraph(),\n    \n    Images: [{ src: faker.image.image() }],\n    \n    Comments: [{\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n    }],\n\n}));\ninitialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\nconst dummyPost = (data) => ({\n    id: data.id,\n    content: data.content,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n});\n\n//-------------------------------------------- 액션\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //-------------------------------------- ADD_POST\n            case ADD_POST_REQUEST:\n                    draft.addPostLoading = true;\n                    draft.addPostDone = false;\n                    draft.addPostError = null;\n                    break;\n            case ADD_POST_SUCCESS:\n                    draft.addPostLoading = false;\n                    draft.addPostDone = true;\n                    draft.mainPosts.unshift(dummyPost(action.data));\n                    break;\n            case ADD_POST_FAILURE:\n                    draft.addPostLoading = false;\n                    draft.addPostError = action.error;\n                    break;\n            //-------------------------------------- REMOVE_POST\n            case REMOVE_POST_REQUEST:\n                    draft.removePostLoading = true;\n                    draft.removePostDone = false;\n                    draft.removePostError = null;\n                    break;\n            case REMOVE_POST_SUCCESS:\n                    draft.removePostLoading = false;\n                    draft.removePostDone = true;\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                    break;\n            case REMOVE_POST_FAILURE:\n                    draft.removePostLoading = false;\n                    draft.removePostError = action.error;\n                    break;\n            //-------------------------------------- ADD_COMMENT\n            case ADD_COMMENT_REQUEST:\n                    draft.addCommentLoading = true;\n                    draft.addCommentDone = false;\n                    draft.addCommentError = null;\n                    break;\n            case ADD_COMMENT_SUCCESS: {\n                    const post = draft.mainPosts.find((v) => v.id === action.data.postId);\n                    post.Comments.unshift(dummyComment(action.data.content));\n                    draft.addCommentLoading = false;\n                    draft.addCommentDone = true;\n                    break;\n            }\n            case ADD_COMMENT_FAILURE:\n                    draft.addCommentLoading = false;\n                    draft.addCommentError = action.error;\n                    break;\n            default:\n                    break;\n        }\n    });\n};\n\nexport default reducer;\n\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/"]},"metadata":{},"sourceType":"module"}