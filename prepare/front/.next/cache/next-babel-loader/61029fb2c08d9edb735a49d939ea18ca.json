{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(login),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogin),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogout),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\n\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction login() {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: 'LOG_IN_FAILURE',\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return take('LOG_IN_REQUEST', login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchLogout() {\n  return _regeneratorRuntime.wrap(function watchLogout$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return take('LOG_OUT_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return take('ADD_POST_REQUEST');\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/index.js"],"names":["login","watchLogin","watchLogout","watchAddPost","rootSaga","all","call","fork","put","take","axios","loginAPI","post","result","type","data","response"],"mappings":";;oDAOUA,K;qDAuBAC,U;qDAIAC,W;qDAIAC,Y;qDAIeC,Q;;AA1CzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C,C,CAAiE;;AACjE,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAoB;AAChB,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,SAAUZ,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMM,IAAI,CAACK,QAAD,CAAV;;AAFvB;AAEcE,UAAAA,MAFd;AAAA;AASQ,iBAAML,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,WAAD,CAAT;;AATR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAeQ,iBAAMP,GAAG,CAAC;AACNM,YAAAA,IAAI,EAAE,gBADA;AAENC,YAAAA,IAAI,EAAE,YAAIC,QAAJ,CAAaD;AAFb,WAAD,CAAT;;AAfR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,SAAUd,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,IAAI,CAAC,gBAAD,EAAmBT,KAAnB,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,IAAI,CAAC,iBAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUN,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,IAAI,CAAC,kBAAD,CAAV;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNE,IAAI,CAACN,UAAD,CADE,EAENM,IAAI,CAACL,WAAD,CAFE,EAGNK,IAAI,CAACJ,YAAD,CAHE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\nimport axios from 'axios';\n\nfunction loginAPI() {\n    return axios.post('/api/login');\n}\n\nfunction* login() {\n    try {\n        const result = yield call(loginAPI)\n        /* call을 사용한 이유는?\n        fork는 비동기 함수 호출이여서 \n        여기서 쓰이면 result가 나오기 전에 다음 코드가 실행되기 때문에\n        call(동기 함수 호출)을 사용한 것입니다.\n        */\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: result.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', login); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\nfunction* watchLogout() {\n    yield take('LOG_OUT_REQUEST');\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST_REQUEST');\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}