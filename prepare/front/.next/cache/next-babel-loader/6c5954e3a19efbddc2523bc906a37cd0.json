{"ast":null,"code":"import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  hasMorePosts: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n}; // initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '해돋이',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n//  \n//-------------------------------------------- 액션\n\nexport var LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport var LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport var LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      //-------------------------------------- LOAD_POST\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.mainPosts = draft.mainPosts.concat(action.data);\n        console.log('메인포스트 갯수', draft.mainPosts.concat(action.data).length);\n        draft.hasMorePosts = draft.mainPosts.length < 50;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n      //-------------------------------------- ADD_POST\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n\n      case ADD_POST_SUCCESS:\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        draft.mainPosts.unshift(action.data);\n        break;\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      //-------------------------------------- REMOVE_POST\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n\n      case REMOVE_POST_SUCCESS:\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        }); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n\n        break;\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n        break;\n      //-------------------------------------- ADD_COMMENT\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          var post = draft.mainPosts.find(function (v) {\n            return v.id === action.data.PostId;\n          });\n          post.Comments.unshift(action.data);\n          draft.addCommentLoading = false;\n          draft.addCommentDone = true;\n          break;\n        }\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePosts","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","reducer","state","action","draft","concat","console","log","length","error","unshift","filter","v","post","find","PostId"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\nimport produce from 'immer';\nimport faker from 'faker';\n\nexport const initialState = {\n    mainPosts: [],\n    imagePaths: [], // 이미지 업로드시 경로 저장\n    \n    hasMorePosts: true,\n\n    loadPostsLoading: false,\n    loadPostsDone: false,\n    loadPostsError: null,\n    \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    \n    removePostLoading: false,\n    removePostDone: false,\n    removePostError: null,\n    \n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null, \n};\n\n//-------------------------------------------- Faker 라이브러리로 더미데이터 생성하기\n\nexport const generateDummyPost = (number) => Array(number).fill().map(() => ({\n        \n    id: shortId.generate(),\n    \n    User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName(),\n    },\n    \n    content: faker.lorem.paragraph(),\n    \n    Images: [{ src: faker.image.image() }],\n    \n    Comments: [{\n        User: {\n            id: shortId.generate(),\n            nickname: faker.name.findName(),\n        },\n        content: faker.lorem.sentence(),\n    }],\n\n}));\n\n// initialState.mainPosts = initialState.mainPosts.concat(generateDummyPost(10));\n\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\n// const dummyPost = (data) => ({\n//     id: data.id,\n//     content: data.content,\n//     User: {\n//         id: 1,\n//         nickname: '해돋이',\n//     },\n//     Images: [],\n//     Comments: [],\n// });\n\n//  \n\n//-------------------------------------------- 액션\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\n\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst reducer = (state = initialState, action) => {\n    return produce(state, (draft) => {\n        switch (action.type) {\n            //-------------------------------------- LOAD_POST\n            case LOAD_POSTS_REQUEST:\n                    draft.loadPostsLoading = true;\n                    draft.loadPostsDone = false;\n                    draft.loadPostsError = null;\n                    break;\n            case LOAD_POSTS_SUCCESS:\n                    draft.loadPostsLoading = false;\n                    draft.loadPostsDone = true;\n                    draft.mainPosts = draft.mainPosts.concat(action.data);\n                    console.log('메인포스트 갯수', draft.mainPosts.concat(action.data).length);\n                    draft.hasMorePosts = draft.mainPosts.length < 50;\n                    break;\n            case LOAD_POSTS_FAILURE:\n                    draft.loadPostsLoading = false;\n                    draft.loadPostsError = action.error;\n                    break;\n            //-------------------------------------- ADD_POST\n            case ADD_POST_REQUEST:\n                    draft.addPostLoading = true;\n                    draft.addPostDone = false;\n                    draft.addPostError = null;\n                    break;\n            case ADD_POST_SUCCESS:\n                    draft.addPostLoading = false;\n                    draft.addPostDone = true;\n                    draft.mainPosts.unshift(action.data);\n                    break;\n            case ADD_POST_FAILURE:\n                    draft.addPostLoading = false;\n                    draft.addPostError = action.error;\n                    break;\n            //-------------------------------------- REMOVE_POST\n            case REMOVE_POST_REQUEST:\n                    draft.removePostLoading = true;\n                    draft.removePostDone = false;\n                    draft.removePostError = null;\n                    break;\n            case REMOVE_POST_SUCCESS:\n                    draft.removePostLoading = false;\n                    draft.removePostDone = true;\n                    draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data); // filter 메소드는 원본을 변경하지 않는 immutable한 메소드이다.\n                    break;\n            case REMOVE_POST_FAILURE:\n                    draft.removePostLoading = false;\n                    draft.removePostError = action.error;\n                    break;\n            //-------------------------------------- ADD_COMMENT\n            case ADD_COMMENT_REQUEST:\n                    draft.addCommentLoading = true;\n                    draft.addCommentDone = false;\n                    draft.addCommentError = null;\n                    break;\n            case ADD_COMMENT_SUCCESS: {\n                    const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\n                    post.Comments.unshift(action.data);\n                    draft.addCommentLoading = false;\n                    draft.addCommentDone = true;\n                    break;\n            }\n            case ADD_COMMENT_FAILURE:\n                    draft.addCommentLoading = false;\n                    draft.addCommentError = action.error;\n                    break;\n            default:\n                    break;\n        }\n    });\n};\n\nexport default reducer;\n\n/* mainPosts 더미 데이터\n{\n    id: 1,\n\n    User: { id: 1, nickname: '해돋이' },\n\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n    Images: [\n        { id: shortId.generate(), src: 'https://bit.ly/34S7zRp' },\n        { id: shortId.generate(), src: 'https://bit.ly/3uX6IJH' },\n        { id: shortId.generate(), src: 'https://bit.ly/2TDFv1w' },\n    ],\n\n    Comments: [\n        { User: { id: shortId.generate(), nickname: '재원' }, content: '키보드 윤활해야지~' },\n        { User: { id: shortId.generate(), nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n    ],\n},\n*/"]},"metadata":{},"sourceType":"module"}