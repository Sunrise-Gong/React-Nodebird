{"ast":null,"code":"import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects'; //import shortId from 'shortid';\n\nimport axios from 'axios';\nimport { LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE //generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- LOAD_POST\n\nfunction loadPostAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadPosts() {\n  try {\n    const result = yield call(loadPostAPI);\n    yield put({\n      type: LOAD_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_POSTS_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLoadPosts() {\n  //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n  yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n} //-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\n\nfunction* removePost(action) {\n  try {\n    //const result = yield call(removePostAPI, action.data)\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n} //-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \n\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["all","takeLatest","fork","put","delay","call","axios","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","loadPostAPI","get","loadPosts","result","type","data","err","response","watchLoadPosts","addPostAPI","post","content","addPost","action","id","watchAddPost","removePost","watchRemovePost","addCommentAPI","postId","addComment","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\n//import shortId from 'shortid';\nimport axios from 'axios';\n\nimport {\n    LOAD_POSTS_REQUEST, \n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n    \n    //generateDummyPost,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- LOAD_POST\nfunction loadPostAPI() { return axios.get('/posts'); }\n\nfunction* loadPosts() {\n    try {\n        const result = yield call(loadPostAPI);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) { \n    return axios.post('/post', { content: data }); \n}\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\n// function removePostAPI(data) {\n//     return axios.post('/api/post', data);\n// }\n\nfunction* removePost(action) {\n    try {\n        //const result = yield call(removePostAPI, action.data)\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: action.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: action.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \nfunction addCommentAPI(data) { \n    return axios.post(`/post/${data.postId}/comment`, data); \n} \n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            data: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}