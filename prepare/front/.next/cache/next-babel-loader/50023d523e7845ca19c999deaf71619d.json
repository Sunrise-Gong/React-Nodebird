{"ast":null,"code":"var __jsx = React.createElement;\n// pages > index.js 의 자식\nimport React, { useState, useCallback } from 'react';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post'; //import moment from 'moment';\n\nmoment.locale('ko'); // 한글로 바꿔주는 설정 (기본:영어)\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n  // post: post 리듀서의 상태값중 'mainPosts 배열'의 요소\n  var dispatch = useDispatch(); // const [liked, setLiked] = useState(false);// 좋아요 버튼의 상태\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1]; // 댓글창 열기 버튼의 상태\n\n\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // user 리듀서: 로그인한 유저의 아이디\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      removePostLoading = _useSelector.removePostLoading; // post 리듀서: 게시글 제거 상태\n\n\n  var liked = post.Likers.find(function (v) {\n    return v.id === id;\n  }); // useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]); // 포스트 카드 개수만큼 리렌더링 발생 index.js에서 실행해야 합니다.\n  //------------------------------------------------\n\n  var onLike = useCallback(function () {\n    // 좋아요\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onUnlike = useCallback(function () {\n    // 좋아요 취소\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []); // 댓글창 토글 함수\n\n  var onRemovePost = useCallback(function () {\n    // 게시글 삭제 버튼\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  var onRetweet = useCallback(function () {\n    // 리트윗 버튼\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [// 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, null, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), \" \", __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(EllipsisOutlined, null))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \"\\uB2D8\\uC774 \\uB9AC\\uD2B8\\uC717\\uD558\\uC168\\uC2B5\\uB2C8\\uB2E4.\") : null,\n    extra: id && __jsx(FollowButton, {\n      post: post\n      /* 게시글 작성자의 id를 넘겨주기 위해서 */\n\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    }\n  }, moment(post.createdAt).format('YYYY.MM.DD')), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.Retweet.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      \"float\": 'right'\n    }\n  }, moment(post.createdAt).fromNow()), __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  }))), commentFormOpened && __jsx(\"div\", null, __jsx(CommentForm, {\n    post: post\n    /* 게시글 아이디가 필요해서 넘겨줍니다  */\n\n  }), __jsx(List, {\n    style: {\n      marginTop: 40\n    },\n    header: \"\".concat(post.Comments.length, \"\\uAC1C\\uC758 \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","Button","Card","Popover","Avatar","List","Comment","HeartTwoTone","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","useDispatch","useSelector","Link","moment","PostImages","CommentForm","PostCardContent","FollowButton","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","locale","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","id","state","user","me","removePostLoading","liked","Likers","find","v","onLike","alert","type","data","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","marginBottom","Images","User","RetweetId","nickname","Retweet","createdAt","format","content","fromNow","marginTop","Comments","length","item"],"mappings":"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","sourcesContent":["// pages > index.js 의 자식\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Link from 'next/link';\nimport moment from 'moment';\n\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\n\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\n\n//import moment from 'moment';\nmoment.locale('ko'); // 한글로 바꿔주는 설정 (기본:영어)\n\nconst PostCard = ({ post }) => { // post: post 리듀서의 상태값중 'mainPosts 배열'의 요소\n    const dispatch = useDispatch();\n    // const [liked, setLiked] = useState(false);// 좋아요 버튼의 상태\n    const [commentFormOpened, setCommentFormOpened] = useState(false); // 댓글창 열기 버튼의 상태\n\n    const id = useSelector((state) => state.user.me?.id); // user 리듀서: 로그인한 유저의 아이디\n    const { removePostLoading } = useSelector((state) => state.post); // post 리듀서: 게시글 제거 상태\n\n    const liked = post.Likers.find((v) => v.id === id);\n\n    // useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]); // 포스트 카드 개수만큼 리렌더링 발생 index.js에서 실행해야 합니다.\n    //------------------------------------------------\n    const onLike = useCallback(() => { // 좋아요\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: LIKE_POST_REQUEST, data: post.id });\n    }, [id]);\n\n    const onUnlike = useCallback(() => { // 좋아요 취소\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: UNLIKE_POST_REQUEST, data: post.id });\n    }, [id]);\n\n    const onToggleComment = useCallback(() => { setCommentFormOpened((prev) => !prev); }, []); // 댓글창 토글 함수\n\n    const onRemovePost = useCallback(() => { // 게시글 삭제 버튼\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: REMOVE_POST_REQUEST, data: post.id });\n    }, [id]);\n\n    const onRetweet = useCallback(() => { // 리트윗 버튼\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: RETWEET_REQUEST, data: post.id });\n    }, [id]);\n\n    return (\n        <div style={{ marginBottom: 20 }}>\n            {/*--------------------------------------------------게시글 이미지, 버튼(리트윗, 좋아요, 댓글, 수정&삭제 or 신고) */}\n            <Card\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[ // 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n\n                    liked\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />,\n\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n\n                    <Popover\n                        key=\"more\"\n                        content={(\n                            <Button.Group>\n                                {id && post.User.id === id\n                                    ? (<><Button>수정</Button> <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button></>)\n                                    : <Button>신고</Button>}\n                            </Button.Group>\n                        )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n                title={post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null}\n                extra={id && <FollowButton post={post/* 게시글 작성자의 id를 넘겨주기 위해서 */} />}\n            >\n                {/*-------------------------------------------------- 게시글 본문 */}\n                {post.RetweetId && post.Retweet\n                    ? (\n                        <Card cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\n                            <div style={{ float: 'right' }}>{moment(post.createdAt).format('YYYY.MM.DD')}</div>\n                            <Card.Meta\n                                avatar={(\n                                    <Link href={`/user/${post.Retweet.User.id}`}>\n                                        <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                                    </Link>\n                                )}\n                                title={post.Retweet.User.nickname}\n                                description={<PostCardContent postData={post.Retweet.content} />}\n                            />\n                        </Card>\n                    )\n                    : (\n                        <>\n                        <div style={{ float: 'right' }}>{moment(post.createdAt).fromNow()}</div>\n                        <Card.Meta\n                            avatar={(\n                                <Link href={`/user/${post.User.id}`}>\n                                    <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                                </Link>\n                            )}\n                            title={post.User.nickname}\n                            description={<PostCardContent postData={post.content} />}\n                        />\n                        </>\n                    )}\n            </Card>\n            {/*--------------------------------------------------게시글의 댓글창(열고 닫기 구현) */}\n            {commentFormOpened && (\n                <div>\n\n                    <CommentForm post={post/* 게시글 아이디가 필요해서 넘겨줍니다  */} />\n\n                    <List\n                        style={{ marginTop: 40 }}\n                        header={`${post.Comments.length}개의 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={(\n                                        <Link href={`/user/${item.User.id}`}>\n                                            <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                                        </Link>\n                                    )}\n                                    content={item.content}\n                                />\n                            </li>\n                        )}\n                    />\n                </div>\n            )}\n            {/* <CommentForm /> */}\n            {/* <Comments /> */}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.string,\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n        Likers: PropTypes.arrayOf(PropTypes.object),\n        RetweetId: PropTypes.number,\n        Retweet: PropTypes.objectOf(PropTypes.any),\n    }).isRequired,\n};\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}