{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from 'shortid';\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    },\n    content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n    Images: [{\n      src: 'https://bit.ly/34S7zRp'\n    }, {\n      src: 'https://bit.ly/3uX6IJH'\n    }, {\n      src: 'https://bit.ly/2TDFv1w'\n    }],\n    Comments: [{\n      User: {\n        nickname: '재원'\n      },\n      content: '키보드 윤활해야지~'\n    }, {\n      User: {\n        nickname: '선범'\n      },\n      content: '여친이랑 산에 가야지~'\n    }]\n  }],\n  imagePaths: [],\n  // 이미지 업로드시 경로 저장\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; //-------------------------------------------- ADD_POST에 사용될 더미데이터\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    content: data,\n    User: {\n      id: 1,\n      nickname: '해돋이'\n    }\n  };\n}; //-------------------------------------------- 액션\n\n\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE'; //--------------------------------------------\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    //-------------------------------------- ADD_POST\n    case ADD_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        addPostLoading: false,\n        addPostDone: true\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n    //-------------------------------------- ADD_COMMENT\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        }); // 댓글을 작성한 게시글의 인덱스 찾기\n\n        var post = _objectSpread({}, state.mainPosts[postIndex]); // 댓글을 작성한 게시글 얕은 복사\n\n\n        post.Comments = [dummyComment(action.data.content)].concat(_toConsumableArray(post.Comments)); // 게시글의 댓글 얕은 복사하고 새 댓글 추가하기 \n\n        var mainPosts = _toConsumableArray(state.mainPosts); // 게시글 얕은복사\n\n\n        mainPosts[postIndex] = post; // 얕은 복사된 댓글 쓴 게시글에 댓글 추가한 게시글 할당\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          mainPosts: mainPosts,\n          addCommentLoading: false,\n          addCommentDone: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","dummyPost","data","generate","dummyComment","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","type","addComment","reducer","state","action","error","postIndex","findIndex","v","postId","post"],"mappings":"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","sourcesContent":["import shortId from 'shortid';\n\nexport const initialState = {\n    mainPosts: [\n        {\n            id: 1,\n\n            User: { id: 1, nickname: '해돋이' },\n\n            content: '안녕하세요 트위터 짝퉁 궁금해서 가입해봤습니다~  #해시태그 #익스프레스',\n\n            Images: [\n                { src: 'https://bit.ly/34S7zRp' },\n                { src: 'https://bit.ly/3uX6IJH' },\n                { src: 'https://bit.ly/2TDFv1w' },\n            ],\n\n            Comments: [\n                { User: { nickname: '재원' }, content: '키보드 윤활해야지~' },\n                { User: { nickname: '선범' }, content: '여친이랑 산에 가야지~' },\n            ],\n        },\n    ],\n    imagePaths: [], // 이미지 업로드시 경로 저장\n    \n    addPostLoading: false,\n    addPostDone: false,\n    addPostError: null,\n    \n    addCommentLoading: false,\n    addCommentDone: false,\n    addCommentError: null, \n};\n//-------------------------------------------- ADD_POST에 사용될 더미데이터\nconst dummyPost = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n    Images: [],\n    Comments: [],\n});\n\nconst dummyComment = (data) => ({\n    id: shortId.generate(),\n    content: data,\n    User: {\n        id: 1,\n        nickname: '해돋이',\n    },\n});\n\n//-------------------------------------------- 액션\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\n\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\n\n//--------------------------------------------\nexport const addPost = (data) => ({\n    type: ADD_POST_REQUEST,\n    data,\n});\n\nexport const addComment = (data) => ({\n    type: ADD_COMMENT_REQUEST,\n    data,\n});\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        //-------------------------------------- ADD_POST\n        case ADD_POST_REQUEST:\n            return {\n                ...state,\n                addPostLoading: true,\n                addPostDone: false,\n                addPostError: null,\n            };\n        case ADD_POST_SUCCESS:\n            return {\n                ...state,\n                mainPosts: [dummyPost(action.data), ...state.mainPosts],\n                addPostLoading: false,\n                addPostDone: true,\n            };\n        case ADD_POST_FAILURE:\n            return {\n                ...state,\n                addPostLoading: false,\n                addPostError: action.error,\n            };\n        //-------------------------------------- ADD_COMMENT\n        case ADD_COMMENT_REQUEST:\n            return {\n                ...state,\n                addCommentLoading: true,\n                addCommentDone: false,\n                addCommentError: null,\n            };\n        case ADD_COMMENT_SUCCESS: {\n            const postIndex = state.mainPosts.findIndex((v) => v.id === action.data.postId); // 댓글을 작성한 게시글의 인덱스 찾기\n            const post = { ...state.mainPosts[postIndex] }; // 댓글을 작성한 게시글 얕은 복사\n            post.Comments = [dummyComment(action.data.content), ...post.Comments]; // 게시글의 댓글 얕은 복사하고 새 댓글 추가하기 \n            const mainPosts = [...state.mainPosts]; // 게시글 얕은복사\n            mainPosts[postIndex] = post; // 얕은 복사된 댓글 쓴 게시글에 댓글 추가한 게시글 할당\n            return {\n                ...state,\n                mainPosts,\n                addCommentLoading: false,\n                addCommentDone: true,\n            };\n        }\n        case ADD_COMMENT_FAILURE:\n            return {\n                ...state,\n                addCommentLoading: false,\n                addCommentError: action.error,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}