{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/user/[id].js\";\nvar __jsx = React.createElement;\n// 특정 사용자의 게시글을 모두 가져오는\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { END } from 'redux-saga';\nimport { Card, Avatar } from 'antd';\nimport axios from 'axios';\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport wrapper from '../../store/configureStore';\n\nconst User = () => {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  const {\n    userInfo\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    // 인피니티 스크롤\n    const onScroll = () => {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          dispatch({\n            type: LOAD_USER_POSTS_REQUEST,\n            lastId: (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id,\n            data: id\n          });\n        }\n      }\n    };\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n  return __jsx(AppLayout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, userInfo && __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }, userInfo.nickname, \"\\uB2D8\\uC758 \\uAE00\"), __jsx(\"meta\", {\n    name: \"description\",\n    content: `${userInfo.nickname}님의 게시글`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: `${userInfo.nickname}님의 게시글`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:description\",\n    content: `${userInfo.nickname}님의 게시글`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: \"https://nodebird.com/favicon.ico\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: `https://nodebird.com/user/${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }\n  })), userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 43\n      }\n    }), userInfo.Posts), __jsx(\"div\", {\n      key: \"following\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 49\n      }\n    }), userInfo.Followings), __jsx(\"div\", {\n      key: \"follower\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }\n    }, \"\\uD314\\uB85C\\uC6CC\", __jsx(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 48\n      }\n    }), userInfo.Followers)],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 33\n      }\n    }, userInfo.nickname[0]),\n    title: userInfo.nickname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })) : null, mainPosts.map(post => __jsx(PostCard, {\n    key: post.id,\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 38\n    }\n  })));\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  const cookie = context.req ? context.req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: context.params.id\n  });\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n});\nexport default User;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/user/[id].js"],"names":["React","useEffect","useDispatch","useSelector","Head","useRouter","END","Card","Avatar","axios","AppLayout","PostCard","LOAD_USER_POSTS_REQUEST","LOAD_MY_INFO_REQUEST","LOAD_USER_REQUEST","wrapper","User","dispatch","router","id","query","userInfo","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","type","lastId","length","data","addEventListener","removeEventListener","nickname","Posts","Followings","Followers","map","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","params","sagaTask","toPromise"],"mappings":"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","sourcesContent":["// 특정 사용자의 게시글을 모두 가져오는\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Head from 'next/head';\nimport { useRouter } from 'next/router';\nimport { END } from 'redux-saga';\nimport { Card, Avatar } from 'antd';\nimport axios from 'axios';\n\nimport AppLayout from '../../components/AppLayout';\nimport PostCard from '../../components/PostCard';\nimport { LOAD_USER_POSTS_REQUEST } from '../../reducers/post';\nimport { LOAD_MY_INFO_REQUEST, LOAD_USER_REQUEST } from '../../reducers/user';\nimport wrapper from '../../store/configureStore';\n\nconst User = () => {\n    const dispatch = useDispatch();\n    const router = useRouter();\n    const { id } = router.query;\n\n    const { userInfo } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\n\n    useEffect(() => { // 인피니티 스크롤\n        const onScroll = () => {\n            if (window.pageYOffset\n                + document.documentElement.clientHeight\n                > document.documentElement.scrollHeight - 300) {\n                if (hasMorePosts && !loadPostsLoading) {\n                    dispatch({\n                        type: LOAD_USER_POSTS_REQUEST, lastId: mainPosts[mainPosts.length - 1]?.id, data: id,\n                    });\n                }\n            }\n        };\n\n        window.addEventListener('scroll', onScroll);\n\n        return () => { window.removeEventListener('scroll', onScroll); };\n    }, [mainPosts.length, hasMorePosts, id, loadPostsLoading]);\n\n    return (\n        <AppLayout>\n            {userInfo && (\n                <Head>\n                    <title>{userInfo.nickname}님의 글</title>\n                    <meta name=\"description\" content={`${userInfo.nickname}님의 게시글`} />\n                    <meta property=\"og:title\" content={`${userInfo.nickname}님의 게시글`} />\n                    <meta property=\"og:description\" content={`${userInfo.nickname}님의 게시글`} />\n                    <meta property=\"og:image\" content=\"https://nodebird.com/favicon.ico\" />\n                    <meta property=\"og:url\" content={`https://nodebird.com/user/${id}`} />\n                </Head>\n            )}\n            {userInfo ? (\n                <Card\n                    actions={[\n                        <div key=\"twit\">짹짹<br />{userInfo.Posts}</div>,\n                        <div key=\"following\">팔로잉<br />{userInfo.Followings}</div>,\n                        <div key=\"follower\">팔로워<br />{userInfo.Followers}</div>,\n                    ]}>\n                    <Card.Meta\n                        avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\n                        title={userInfo.nickname} />\n                </Card>\n            )\n                : null}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)}\n        </AppLayout>\n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    const cookie = context.req ? context.req.headers.cookie : '';\n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) { axios.defaults.headers.Cookie = cookie; }\n\n    context.store.dispatch({ type: LOAD_USER_POSTS_REQUEST, data: context.params.id });\n    context.store.dispatch({ type: LOAD_MY_INFO_REQUEST });\n    context.store.dispatch({ type: LOAD_USER_REQUEST });\n    context.store.dispatch(END);\n    await context.store.sagaTask.toPromise();\n});\n\nexport default User;"]},"metadata":{},"sourceType":"module"}