{"ast":null,"code":"import { all, call, fork, put, take } from 'redux-saga/effects'; // saga 의 이펙트들\n\nimport axios from 'axios';\n\nfunction loginAPI() {\n  return axios.post('/api/login');\n}\n\nfunction* login() {\n  const result = yield call(loginAPI);\n  yield put({\n    type: 'LOG_IN_SUCCESS',\n    data: result.data\n  });\n}\n\nfunction* watchLogin() {\n  yield take('LOG_IN', login); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\nfunction* watchLogout() {\n  yield take('LOG_OUT');\n}\n\nfunction* watchAddPost() {\n  yield take('ADD_POST');\n}\n\nexport default function* rootSaga() {\n  yield all([fork(watchLogin), fork(watchLogout), fork(watchAddPost)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/index.js"],"names":["all","call","fork","put","take","axios","loginAPI","post","login","result","type","data","watchLogin","watchLogout","watchAddPost","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA4C,oBAA5C,C,CAAkE;;AAClE,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,GAAmB;AACf,SAAOD,KAAK,CAACE,IAAN,CAAW,YAAX,CAAP;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,QAAMC,MAAM,GAAG,MAAMR,IAAI,CAACK,QAAD,CAAzB;AACA,QAAMH,GAAG,CAAC;AACNO,IAAAA,IAAI,EAAE,gBADA;AAENC,IAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,GAAD,CAAT;AAIH;;AAED,UAAUC,UAAV,GAAuB;AACnB,QAAMR,IAAI,CAAC,QAAD,EAAWI,KAAX,CAAV,CADmB,CACU;AAChC;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAMT,IAAI,CAAC,SAAD,CAAV;AACH;;AAED,UAAUU,YAAV,GAAyB;AACrB,QAAMV,IAAI,CAAC,UAAD,CAAV;AACH;;AAED,eAAe,UAAUW,QAAV,GAAqB;AAChC,QAAMf,GAAG,CAAC,CACNE,IAAI,CAACU,UAAD,CADE,EAENV,IAAI,CAACW,WAAD,CAFE,EAGNX,IAAI,CAACY,YAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { all, call, fork, put, take  } from 'redux-saga/effects'; // saga 의 이펙트들\nimport axios from 'axios';\n\nfunction loginAPI(){\n    return axios.post('/api/login'); \n}\n\nfunction* login() {\n    const result = yield call(loginAPI)\n    yield put({\n        type: 'LOG_IN_SUCCESS',\n        data: result.data\n    })\n}\n\nfunction* watchLogin() {\n    yield take('LOG_IN', login); // take: LOG_IN 이라는 액션이 실행될 때까지 기다리겠다는 의미\n}\n\nfunction* watchLogout() {\n    yield take('LOG_OUT');\n}\n\nfunction* watchAddPost() {\n    yield take('ADD_POST');\n}\n\nexport default function* rootSaga() {\n    yield all([\n        fork(watchLogin),\n        fork(watchLogout),\n        fork(watchAddPost),\n    ])\n}"]},"metadata":{},"sourceType":"module"}