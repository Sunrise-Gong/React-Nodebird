{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(retweet),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchRetweet),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnlikePost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects'; //import shortId from 'shortid';\n\nimport axios from 'axios';\nimport { LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE //generateDummyPost,\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user'; //-------------------------------------------------- RETWEET\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\n\nfunction retweetAPI(data) {\n  return axios.post(\"/post/\".concat(data, \"/retweet\"));\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} //-------------------------------------------------- UPLOAD_IMAGES\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\n\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data);\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} //-------------------------------------------------- LIKE_POST\n\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} //-------------------------------------------------- UNLIKE_POST\n\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} //-------------------------------------------------- LOAD_POST\n\n\nfunction loadPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction loadPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadPostsAPI);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} //-------------------------------------------------- ADD_POST\n\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context11.next = 14;\n          break;\n\n        case 10:\n          _context11.prev = 10;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} //-------------------------------------------------- REMOVE_POST\n\n\nfunction removePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data));\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(removePostAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return delay(1000);\n\n        case 6:\n          _context13.next = 8;\n          return put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 8:\n          _context13.next = 10;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 10:\n          _context13.next = 16;\n          break;\n\n        case 12:\n          _context13.prev = 12;\n          _context13.t0 = _context13[\"catch\"](0);\n          _context13.next = 16;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context13.t0.response.data\n          });\n\n        case 16:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 12]]);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} //-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \n\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context15.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return all([fork(watchRetweet), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchAddPost), fork(watchLoadPosts), fork(watchRemovePost), fork(watchAddComment)]);\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17);\n}\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/post.js"],"names":["retweet","watchRetweet","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","loadPosts","watchLoadPosts","addPost","watchAddPost","removePost","watchRemovePost","addComment","watchAddComment","postSaga","all","takeLatest","fork","put","delay","call","axios","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","ADD_POST_TO_ME","REMOVE_POST_OF_ME","retweetAPI","data","post","action","result","type","error","response","uploadImagesAPI","likePostAPI","patch","unlikePostAPI","loadPostsAPI","get","addPostAPI","id","removePostAPI","addCommentAPI","postId","console"],"mappings":"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","sourcesContent":["import { all, takeLatest, fork, put, delay, call } from 'redux-saga/effects';\n//import shortId from 'shortid';\nimport axios from 'axios';\n\nimport {\n    LIKE_POST_REQUEST, \n    LIKE_POST_SUCCESS, \n    LIKE_POST_FAILURE,\n    \n    UNLIKE_POST_REQUEST, \n    UNLIKE_POST_SUCCESS, \n    UNLIKE_POST_FAILURE,\n    \n    LOAD_POSTS_REQUEST, \n    LOAD_POSTS_SUCCESS, \n    LOAD_POSTS_FAILURE,\n    \n    ADD_POST_REQUEST, \n    ADD_POST_SUCCESS, \n    ADD_POST_FAILURE,\n    \n    ADD_COMMENT_REQUEST, \n    ADD_COMMENT_SUCCESS, \n    ADD_COMMENT_FAILURE,\n\n    REMOVE_POST_REQUEST,\n    REMOVE_POST_SUCCESS,\n    REMOVE_POST_FAILURE,\n\n    UPLOAD_IMAGES_REQUEST,\n    UPLOAD_IMAGES_SUCCESS,\n    UPLOAD_IMAGES_FAILURE,\n    \n    RETWEET_REQUEST,\n    RETWEET_SUCCESS,\n    RETWEET_FAILURE,\n    //generateDummyPost,\n\n} from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\n//-------------------------------------------------- RETWEET\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\nfunction retweetAPI(data) { return axios.post(`/post/${data}/retweet`); } \n\nfunction* retweet(action) {\n    try {\n        const result = yield call(retweetAPI, action.data);\n        yield put({\n            type: RETWEET_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: RETWEET_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRetweet() { yield takeLatest(RETWEET_REQUEST, retweet); }\n\n//-------------------------------------------------- UPLOAD_IMAGES\n// form 데이터는 { images: data } 이렇게 감싸면 json이 되서 문제가 됩니다.\nfunction uploadImagesAPI(data) { return axios.post('/post/images', data); } \n\nfunction* uploadImages(action) {\n    try {\n        const result = yield call(uploadImagesAPI, action.data);\n        yield put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchUploadImages() { yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages); }\n\n//-------------------------------------------------- LIKE_POST\nfunction likePostAPI(data) { return axios.patch(`/post/${data}/like`); }\n\nfunction* likePost(action) {\n    try {\n        const result = yield call(likePostAPI, action.data);\n        yield put({\n            type: LIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLikePost() { yield takeLatest(LIKE_POST_REQUEST, likePost); }\n\n//-------------------------------------------------- UNLIKE_POST\nfunction unlikePostAPI(data) { return axios.delete(`/post/${data}/like`); }\n\nfunction* unlikePost(action) {\n    try {\n        const result = yield call(unlikePostAPI, action.data);\n        yield put({\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: UNLIKE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchUnlikePost() { yield takeLatest(UNLIKE_POST_REQUEST, unlikePost); }\n\n//-------------------------------------------------- LOAD_POST\nfunction loadPostsAPI() { return axios.get('/posts'); }\n\nfunction* loadPosts() {\n    try {\n        const result = yield call(loadPostsAPI);\n        yield put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: LOAD_POSTS_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchLoadPosts() {\n    //yield throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n    yield takeLatest(LOAD_POSTS_REQUEST, loadPosts);\n}\n\n//-------------------------------------------------- ADD_POST\nfunction addPostAPI(data) { return axios.post('/post', data); }\n\nfunction* addPost(action) {\n    try {\n        const result = yield call(addPostAPI, action.data);\n        yield put({\n            type: ADD_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id,\n        });\n    } catch (err) {\n        yield put({\n            type: ADD_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddPost() {\n    yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\n//-------------------------------------------------- REMOVE_POST\nfunction removePostAPI(data) { return axios.delete(`/post/${data}`); }\n\nfunction* removePost(action) {\n    try {\n        const result = yield call(removePostAPI, action.data);\n        yield delay(1000);\n        yield put({\n            type: REMOVE_POST_SUCCESS,\n            data: result.data,\n        });\n        yield put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data,\n        });\n    } catch (err) {\n        yield put({\n            type: REMOVE_POST_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchRemovePost() {\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\n//-------------------------------------------------- ADD_COMMENT\n// ex) /POST /post/1/comment -> 게시글 아이디가 유동적인 경우 \nfunction addCommentAPI(data) { \n    return axios.post(`/post/${data.postId}/comment`, data); \n} \n\nfunction* addComment(action) {\n    try {\n        const result = yield call(addCommentAPI, action.data);\n        yield put({\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({\n            type: ADD_COMMENT_FAILURE,\n            error: err.response.data,\n        });\n    }\n}\n\nfunction* watchAddComment() {\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n    yield all([\n        fork(watchRetweet),\n        fork(watchUploadImages),\n        fork(watchLikePost),\n        fork(watchUnlikePost),\n        fork(watchAddPost),\n        fork(watchLoadPosts),\n        fork(watchRemovePost),\n        fork(watchAddComment),\n    ]);\n}\n\n/*\n------------------------ takeLatest의 문제점\n\ntakeLatest 이펙트의 문제점은 여러번의 요청이\n서버로 가기 때문에 응답은 한번만 오더라도\n서버에 데이터가 중복되서 저장될 수 있습니다.\n그런경우 새로고침시 화면에 데이터가 중복되서 나타날수 있습니다.\n\n------------------------ throttle로 문제해결\n\n이 문제를 해결할 수 있는 effects가 throttle 입니다.\n아래는 2초동안 한번의 요청을 받겠다는 설정 입니다.\n\nfunction* watchAddPost() {\n    yield throttle('ADD_POST_REQUEST', addPost, 2000);\n}\n------------------------ 서버검증으로 문제해결\n\ntakeLatest를 사용하면서\n서버에서의 검증을 통해서 연속된 요청의 문제를 해결할 수도 있습니다.\n*/"]},"metadata":{},"sourceType":"module"}