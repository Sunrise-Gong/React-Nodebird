{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\"; // import axios from 'axios';\n\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/user'; //-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n} //-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","LOG_IN_SUCCESS","LOG_IN_FAILURE","logIn","action","type","data","err","error","response","watchLogIn","logOut","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CACA;;AAEA,SACIC,cADJ,EACoBC,cADpB,QAGO,kBAHP,C,CAKA;AACA;AACA;AACA;;AACA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMC,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAEJ,cADA;AAENK,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAKH,GATD,CASE,OAAOC,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAEH,cADA;AAENM,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUI,UAAV,GAAuB;AACnB,QAAMV,UAAU,CAAC,gBAAD,EAAmBG,KAAnB,CAAhB;AACH,C,CAED;AACA;AACA;AACA;;;AAEA,UAAUQ,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMb,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAEO;AADA,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOL,GAAP,EAAY;AACV,UAAMR,GAAG,CAAC;AACNM,MAAAA,IAAI,EAAEQ,eADA;AAENL,MAAAA,KAAK,EAAED,GAAG,CAACE,QAAJ,CAAaH;AAFd,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUQ,WAAV,GAAwB;AACpB,QAAMd,UAAU,CAAC,iBAAD,EAAoBW,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUI,QAAV,GAAqB;AAChC,QAAMnB,GAAG,CAAC,CACNC,IAAI,CAACa,UAAD,CADE,EAENb,IAAI,CAACiB,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\n// import axios from 'axios';\n\nimport { \n    LOG_IN_SUCCESS, LOG_IN_FAILURE,\n\n} from '../reducers/user'\n\n//-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\nfunction* logIn(action) {\n    try {\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n\n        yield put({\n            type: LOG_IN_SUCCESS,\n            data: action.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: LOG_IN_FAILURE,\n            error: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogIn() {\n    yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\nfunction* logOut() {\n    try {\n        //const result = yield call(logOutAPI)\n        yield delay(1000);\n        yield put({\n            type: LOG_OUT_SUCCESS,\n        });\n\n    } catch (err) {\n        yield put({\n            type: LOG_OUT_FAILURE,\n            error: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),\n        fork(watchLogOut)\n    ])\n}"]},"metadata":{},"sourceType":"module"}