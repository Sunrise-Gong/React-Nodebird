{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js\";\nvar __jsx = React.createElement;\n// pages > index.js 의 자식\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  // post: post 리듀서의 상태값중 'mainPosts 배열'의 요소\n  const dispatch = useDispatch(); // const [liked, setLiked] = useState(false);// 좋아요 버튼의 상태\n\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // 댓글창 열기 버튼의 상태\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // user 리듀서: 로그인한 유저의 아이디\n\n  const {\n    removePostLoading,\n    retweetError\n  } = useSelector(state => state.post); // post 리듀서: 게시글 제거 상태\n\n  const liked = post.Likers.find(v => v.id === id); // useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]);\n  //------------------------------------------------\n\n  const onLike = useCallback(() => {\n    // 좋아요\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    // 좋아요 취소\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []); // 댓글창 토글 함수\n\n  const onRemovePost = useCallback(() => {\n    // 게시글 삭제 버튼\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRetweet = useCallback(() => {\n    // 리트윗 버튼\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 42\n      }\n    }),\n    actions: [// 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      onClick: onRetweet,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onUnlike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 27\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 27\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 42\n        }\n      }, \"\\uC218\\uC815\"), \" \", __jsx(Button, {\n        type: \"danger\",\n        loading: removePostLoading,\n        onClick: onRemovePost,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 62\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 39\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 25\n      }\n    }))],\n    extra: id && __jsx(FollowButton, {\n      post: post\n      /* 게시글 작성자의 id를 넘겨주기 위해서 */\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 30\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post\n    /* 게시글 아이디가 필요해서 넘겨줍니다  */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    style: {\n      marginTop: 40\n    },\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 29\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 45\n        }\n      }, \" \", item.User.nickname[0], \" \"),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 33\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.string,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object),\n    Likers: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Button","Card","Popover","Avatar","List","Comment","HeartTwoTone","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","useDispatch","useSelector","PostImages","CommentForm","PostCardContent","FollowButton","REMOVE_POST_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","id","state","user","me","removePostLoading","retweetError","liked","Likers","find","v","onLike","alert","type","data","onUnlike","onToggleComment","prev","onRemovePost","onRetweet","marginBottom","Images","User","nickname","content","marginTop","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["// pages > index.js 의 자식\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PostImages from './PostImages';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport FollowButton from './FollowButton';\n\nimport { REMOVE_POST_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\n\nconst PostCard = ({ post }) => { // post: post 리듀서의 상태값중 'mainPosts 배열'의 요소\n    const dispatch = useDispatch();\n    // const [liked, setLiked] = useState(false);// 좋아요 버튼의 상태\n    const [commentFormOpened, setCommentFormOpened] = useState(false); // 댓글창 열기 버튼의 상태\n\n    const id = useSelector((state) => state.user.me?.id); // user 리듀서: 로그인한 유저의 아이디\n    const { removePostLoading, retweetError } = useSelector((state) => state.post); // post 리듀서: 게시글 제거 상태\n    \n    const liked = post.Likers.find((v) => v.id === id);\n\n    // useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]);\n//------------------------------------------------\n    const onLike = useCallback(() => { // 좋아요\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: LIKE_POST_REQUEST, data: post.id });\n    }, [id]); \n    \n    const onUnlike = useCallback(() => { // 좋아요 취소\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: UNLIKE_POST_REQUEST, data: post.id });\n    }, [id]); \n\n    const onToggleComment = useCallback(() => { setCommentFormOpened((prev) => !prev); }, []); // 댓글창 토글 함수\n    \n    const onRemovePost = useCallback(() => { // 게시글 삭제 버튼\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: REMOVE_POST_REQUEST, data: post.id });\n    }, [id]);\n    \n    const onRetweet = useCallback(() => { // 리트윗 버튼\n        if (!id) { return alert('로그인이 필요합니다.'); }\n        return dispatch({ type: RETWEET_REQUEST, data: post.id });\n    }, [id]);\n    return (\n        <div style={{ marginBottom: 20 }}>\n            {/*--------------------------------------------------게시글 이미지, 버튼(리트윗, 좋아요, 댓글, 수정&삭제 or 신고) */}\n            <Card\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[ // 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n                    <RetweetOutlined key=\"retweet\" onClick={onRetweet} />,\n\n                    liked\n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\n                        : <HeartOutlined key=\"heart\" onClick={onLike} />,\n\n                    <MessageOutlined key=\"comment\" onClick={onToggleComment} />,\n\n                    <Popover\n                        key=\"more\"\n                        content={(\n                            <Button.Group>\n                                {id && post.User.id === id\n                                    ? (<><Button>수정</Button> <Button type=\"danger\" loading={removePostLoading} onClick={onRemovePost}>삭제</Button></>)\n                                    : <Button>신고</Button>}\n                            </Button.Group>\n                        )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n                extra={id && <FollowButton post={post/* 게시글 작성자의 id를 넘겨주기 위해서 */} />}\n            >\n                {/*--------------------------------------------------게시글 본문(해시태그 링크화) */}\n                <Card.Meta\n                    avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n                    title={post.User.nickname}\n                    description={<PostCardContent postData={post.content} />}\n                />\n\n            </Card>\n            {/*--------------------------------------------------게시글의 댓글창(열고 닫기 구현) */}\n            {commentFormOpened && (\n                <div>\n\n                    <CommentForm post={post/* 게시글 아이디가 필요해서 넘겨줍니다  */} />\n\n                    <List\n                        style={{ marginTop: 40 }}\n                        header={`${post.Comments.length}개의 댓글`}\n                        itemLayout=\"horizontal\"\n                        dataSource={post.Comments}\n                        renderItem={(item) => (\n                            <li>\n                                <Comment\n                                    author={item.User.nickname}\n                                    avatar={<Avatar> {item.User.nickname[0]} </Avatar>}\n                                    content={item.content}\n                                />\n                            </li>\n                        )}\n                    />\n                </div>\n            )}\n            {/* <CommentForm /> */}\n            {/* <Comments /> */}\n        </div>\n    );\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.string,\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n        Likers: PropTypes.arrayOf(PropTypes.object),\n    }).isRequired,\n};\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}