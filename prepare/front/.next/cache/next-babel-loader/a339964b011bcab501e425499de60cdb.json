{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react'; //<-이거 안쓰면 eslint:recommended 설정에 걸림\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\n\nvar Home = function Home() {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts,\n      hasMorePosts = _useSelector2.hasMorePosts,\n      loadPostsLoading = _useSelector2.loadPostsLoading,\n      retweetError = _useSelector2.retweetError;\n\n  useEffect(function () {\n    if (retweetError) {\n      alert(retweetError);\n    }\n  }, [retweetError]);\n  useEffect(function () {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n    dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }, []); // 첫 렌더링 후 실행\n\n  useEffect(function () {\n    function onScroll() {\n      // console.log( \n      //     window.scrollY, // 얼마나 내렸는지\n      //     document.documentElement.clientHeight, // 화면이 보이는 길이\n      //     document.documentElement.scrollHeight, // 총 세로 길이 \n      //     );\n      if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    }; // 이거 안하면 메모리에 쌓임\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return __jsx(AppLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, me && __jsx(PostForm, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 20\n    }\n  }), mainPosts.map(function (post) {\n    return __jsx(PostCard, {\n      key: post.id,\n      post: post,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 38\n      }\n    });\n  }), \";\");\n};\n\n_s(Home, \"eO+QMWR+/tIpNUDFV1MauWXrqHY=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Home;\nexport var __N_SSP = true;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","AppLayout","PostForm","PostCard","LOAD_POSTS_REQUEST","LOAD_USER_REQUEST","Home","dispatch","state","user","me","post","mainPosts","hasMorePosts","loadPostsLoading","retweetError","alert","type","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","addEventListener","removeEventListener","map"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAA0C;;AAC1C,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAGA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AAAA;;AACf,MAAMC,QAAQ,GAAGR,WAAW,EAA5B;;AACA,qBAAeC,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,IAAjB;AAAA,GAAD,CAA1B;AAAA,MAAQC,EAAR,gBAAQA,EAAR;;AACA,sBAAoEV,WAAW,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACG,IAAjB;AAAA,GAAD,CAA/E;AAAA,MAAQC,SAAR,iBAAQA,SAAR;AAAA,MAAmBC,YAAnB,iBAAmBA,YAAnB;AAAA,MAAiCC,gBAAjC,iBAAiCA,gBAAjC;AAAA,MAAmDC,YAAnD,iBAAmDA,YAAnD;;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AAAE,QAAIiB,YAAJ,EAAkB;AAAEC,MAAAA,KAAK,CAACD,YAAD,CAAL;AAAsB;AAAE,GAArD,EAAuD,CAACA,YAAD,CAAvD,CAAT;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACZS,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAEb;AAAR,KAAD,CAAR;AACAG,IAAAA,QAAQ,CAAC;AAAEU,MAAAA,IAAI,EAAEZ;AAAR,KAAD,CAAR;AACH,GAHQ,EAGN,EAHM,CAAT,CAPe,CAUP;;AAERP,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASoB,QAAT,GAAoB;AAChB;AACA;AACA;AACA;AACA;AACA,UAAIC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,CAACC,eAAT,CAAyBC,YAA1C,GAAyDF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAArG,EAA0G;AACtG,YAAIX,YAAY,IAAI,CAACC,gBAArB,EAAuC;AAAA;;AACnC,cAAMW,MAAM,iBAAGb,SAAS,CAACA,SAAS,CAACc,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACApB,UAAAA,QAAQ,CAAC;AAAEU,YAAAA,IAAI,EAAEb,kBAAR;AAA4BqB,YAAAA,MAAM,EAANA;AAA5B,WAAD,CAAR;AACH;AACJ;AACJ;;AACDN,IAAAA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCV,QAAlC;AACA,WAAO,YAAM;AAAEC,MAAAA,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCX,QAArC;AAAiD,KAAhE,CAfY,CAesD;AACrE,GAhBQ,EAgBN,CAACL,YAAD,EAAeC,gBAAf,EAAiCF,SAAjC,CAhBM,CAAT;AAkBA,SACI,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,EAAE,IAAI,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,EAEKE,SAAS,CAACkB,GAAV,CAAc,UAACnB,IAAD;AAAA,WAAU,MAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACgB,EAApB;AAAwB,MAAA,IAAI,EAAEhB,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AAAA,GAAd,CAFL,MADJ;AAMH,CApCD;;GAAML,I;UACeP,W,EACFC,W,EACqDA,W;;;KAHlEM,I;;AA2CN,eAAeA,IAAf","sourcesContent":["import React, { useEffect } from 'react'; //<-이거 안쓰면 eslint:recommended 설정에 걸림\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_USER_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state) => state.post);\n    \n    useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]);\n\n    useEffect(() => { \n        dispatch({ type: LOAD_POSTS_REQUEST }); \n        dispatch({ type: LOAD_USER_REQUEST }); \n    }, []); // 첫 렌더링 후 실행\n\n    useEffect(() => {\n        function onScroll() {\n            // console.log( \n            //     window.scrollY, // 얼마나 내렸는지\n            //     document.documentElement.clientHeight, // 화면이 보이는 길이\n            //     document.documentElement.scrollHeight, // 총 세로 길이 \n            //     );\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n                if (hasMorePosts && !loadPostsLoading) { \n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\n                    dispatch({ type: LOAD_POSTS_REQUEST, lastId });\n                }\n            }\n        }\n        window.addEventListener('scroll', onScroll);\n        return () => { window.removeEventListener('scroll', onScroll); }; // 이거 안하면 메모리에 쌓임\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)};\n        </AppLayout>\n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps((context) => {\n    context.store.dispatch({ type: LOAD_POSTS_REQUEST });\n    context.store.dispatch({ type: LOAD_USER_REQUEST }); \n});\n\nexport default Home;"]},"metadata":{},"sourceType":"module"}