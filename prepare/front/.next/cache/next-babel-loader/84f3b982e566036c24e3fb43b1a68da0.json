{"ast":null,"code":"import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({\n  dispatch,\n  getState\n}) => next => action => {\n  console.log(action);\n  return next(action);\n};\n\nconst configureStore = () => {\n  const middlewares = [thunkMiddleware, loggerMiddleware];\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) // production \n  : composeWithDevTools(applyMiddleware(...middlewares)); // Development\n\n  const store = createStore(reducer, enhancer);\n  return store;\n};\n\nconst wrapper = createWrapper(configureStore, {\n  //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n  debug: true\n});\nexport default wrapper;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/store/configureStore.js"],"names":["createWrapper","applyMiddleware","compose","createStore","composeWithDevTools","thunkMiddleware","reducer","loggerMiddleware","dispatch","getState","next","action","console","log","configureStore","middlewares","enhancer","store","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,eAAP,MAA4B,aAA5B;AAEA,OAAOC,OAAP,MAAoB,aAApB;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAWC,EAAAA;AAAX,CAAD,KAA4BC,IAAD,IAAWC,MAAD,IAAY;AACtEC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,SAAOD,IAAI,CAACC,MAAD,CAAX;AACH,CAHD;;AAKA,MAAMG,cAAc,GAAG,MAAM;AACzB,QAAMC,WAAW,GAAG,CAACV,eAAD,EAAkBE,gBAAlB,CAApB;AAEA,QAAMS,QAAQ,GAAG,QACfd,OAAO,CAACD,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CADQ,CAC0B;AAD1B,IAEfX,mBAAmB,CAACH,eAAe,CAAC,GAAGc,WAAJ,CAAhB,CAFrB,CAHyB,CAK8B;;AAEvD,QAAME,KAAK,GAAGd,WAAW,CAACG,OAAD,EAAUU,QAAV,CAAzB;AACA,SAAOC,KAAP;AACH,CATD;;AAWA,MAAMC,OAAO,GAAGlB,aAAa,CAACc,cAAD,EAAiB;AAC1C;AACAK,EAAAA,KAAK;AAFqC,CAAjB,CAA7B;AAKA,eAAeD,OAAf","sourcesContent":["import { createWrapper } from 'next-redux-wrapper';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\n\nimport reducer from '../reducers';\n\nconst loggerMiddleware = ({ dispatch,getState }) => (next) => (action) => {\n    console.log(action);\n    return next(action);\n}\n\nconst configureStore = () => {\n    const middlewares = [thunkMiddleware, loggerMiddleware];\n\n    const enhancer = process.env.NODE_ENV === 'production' \n    ? compose(applyMiddleware(...middlewares)) // production \n    : composeWithDevTools(applyMiddleware(...middlewares)) // Development\n    \n    const store = createStore(reducer, enhancer);\n    return store\n};\n\nconst wrapper = createWrapper(configureStore, {\n    //이 설정을 통해 개발시에 리덕스에 관해서 자세한 설명이 나옵니다.\n    debug: process.env.NODE_ENV === 'development',\n});\n\nexport default wrapper;"]},"metadata":{},"sourceType":"module"}