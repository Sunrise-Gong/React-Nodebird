{"ast":null,"code":"import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\"; // import axios from 'axios';\n//-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\n\nfunction* logIn(action) {\n  try {\n    //const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\n\n\nfunction* watchLogIn() {\n  yield takeLatest('LOG_IN_REQUEST', logIn);\n} //-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\n\nfunction* logOut() {\n  try {\n    //const result = yield call(logOutAPI)\n    yield delay(1000);\n    yield put({\n      type: 'LOG_OUT_SUCCESS'\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_OUT_FAILURE',\n      data: err.response.data\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/sagas/user.js"],"names":["all","fork","delay","put","takeLatest","logIn","action","type","data","err","response","watchLogIn","logOut","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,KAApB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,oBAAlD,C,CACA;AAEA;AACA;AACA;AACA;;AACA,UAAUC,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACA,UAAMJ,KAAK,CAAC,IAAD,CAAX;AAEA,UAAMC,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEF,MAAM,CAACE;AAFP,KAAD,CAAT;AAKH,GATD,CASE,OAAOC,GAAP,EAAY;AACV,UAAMN,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE,gBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AAEJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,UAAUG,UAAV,GAAuB;AACf,QAAMP,UAAU,CAAC,gBAAD,EAAmBC,KAAnB,CAAhB;AACP,C,CAED;AACA;AACA;AACA;;;AAEA,UAAUO,MAAV,GAAmB;AACf,MAAI;AACA;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,GAAP,EAAY;AACV,UAAMN,GAAG,CAAC;AACNI,MAAAA,IAAI,EAAE,iBADA;AAENC,MAAAA,IAAI,EAAEC,GAAG,CAACC,QAAJ,CAAaF;AAFb,KAAD,CAAT;AAIH;AAEJ;;AAED,UAAUK,WAAV,GAAwB;AACpB,QAAMT,UAAU,CAAC,iBAAD,EAAoBQ,MAApB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAMd,GAAG,CAAC,CACNC,IAAI,CAACU,UAAD,CADE,EAENV,IAAI,CAACY,WAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { all, fork, delay, put, takeLatest } from \"redux-saga/effects\";\n// import axios from 'axios';\n\n//-------------------------------------------------- LOG_IN\n// function logInAPI(data) {\n//     return axios.post('/api/login', data);\n// }\nfunction* logIn(action) {\n    try {\n        //const result = yield call(logInAPI, action.data);\n        yield delay(1000);\n\n        yield put({\n            type: 'LOG_IN_SUCCESS',\n            data: action.data\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_IN_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\n/* \nfunction* watchLogin() {\n    yield take('LOG_IN_REQUEST', logIn);\n}\nwatchLogin 은 '이벤트 리스너'같은 역할을 하는 함수에요.\n이 함수의 치명적인 단점은 일회용 이라는 것입니다.\n이를테면 한번 로그인 하고 로그아웃 하면 그 다음 로그인이 불가능 해요.\n이 문제를 아래와 같이 while문을 이용해서 해결할 수 있습니다.\n\nfunction* watchLogin() {\n    while (true) {\n        yield take('LOG_IN_REQUEST', logIn);\n    }\n}\n------------------------------- takeEvery\n위 코드를 간단하게 표현할 수 있는 saga effects가 있습니다.\n바로 takeEvery 입니다.\n\nfunction* watchLogin() {\n        yield takeEvery('LOG_IN_REQUEST', logIn);\n}\n------------------------------- takeLatest\n좀 더 나아가서 로그인 버튼을 실수로 여러번 누르게 되면\n여러번의 요청이 갈 수 도 있는데\n이 때 맨 마지막 요청만을 응답받도록 해주는 \ntakeLatest 이펙트가 있습니다.\n*/\nfunction* watchLogIn() {\n        yield takeLatest('LOG_IN_REQUEST', logIn);\n}\n\n//-------------------------------------------------- LOG_OUT\n// function logOutAPI() {\n//     return axios.post('/api/logout');\n// }\n\nfunction* logOut() {\n    try {\n        //const result = yield call(logOutAPI)\n        yield delay(1000);\n        yield put({\n            type: 'LOG_OUT_SUCCESS',\n        });\n\n    } catch (err) {\n        yield put({\n            type: 'LOG_OUT_FAILURE',\n            data: err.response.data\n        });\n    }\n\n}\n\nfunction* watchLogOut() {\n    yield takeLatest('LOG_OUT_REQUEST', logOut);\n}\n\nexport default function* userSaga() {\n    yield all([\n        fork(watchLogIn),   \n        fork(watchLogOut)        \n    ])\n}"]},"metadata":{},"sourceType":"module"}