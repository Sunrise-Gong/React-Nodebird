{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nconst initialState = {\n  user: {},\n  post: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      console.log('HYDRATE', action);\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    case 'LOG_IN':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case 'LOG_OUT':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/reducers/index.js"],"names":["HYDRATE","initialState","user","post","rootReducer","state","action","type","console","log","payload","isLoggedIn","data"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAIjBC,EAAAA,IAAI,EAAE;AAJW,CAArB;;AASA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,OAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB;AACA,6CAAYD,KAAZ,GAAsBC,MAAM,CAACI,OAA7B;;AACJ,SAAK,QAAL;AACI,6CACOL,KADP;AAEIH,QAAAA,IAAI,kCACGG,KAAK,CAACH,IADT;AAEAS,UAAAA,UAAU,EAAE,IAFZ;AAGAT,UAAAA,IAAI,EAAEI,MAAM,CAACM;AAHb;AAFR;;AAQJ,SAAK,SAAL;AACI,6CACOP,KADP;AAEIH,QAAAA,IAAI,kCACGG,KAAK,CAACH,IADT;AAEAS,UAAAA,UAAU,EAAE,KAFZ;AAGAT,UAAAA,IAAI,EAAE;AAHN;AAFR;;AAQA;AACI,aAAOG,KAAP;AAvBZ;AAyBH,CA1BD;;AA4BA,eAAeD,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\n\nconst initialState = {\n    user: {\n        \n    },\n    post: {\n\n    }\n}\n\nconst rootReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case HYDRATE :\n            console.log('HYDRATE', action);\n            return { ...state, ...action.payload };\n        case 'LOG_IN':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: true,\n                    user: action.data\n                }\n            };\n        case 'LOG_OUT':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    isLoggedIn: false,\n                    user: null,\n                }\n            }\n            default:\n                return state;\n    }\n}\n\nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}