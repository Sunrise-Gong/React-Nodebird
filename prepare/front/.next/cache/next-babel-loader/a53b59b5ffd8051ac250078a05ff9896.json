{"ast":null,"code":"var _jsxFileName = \"/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd';\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\nimport PostImages from '../components/PostImages';\nimport CommentForm from '../components/CommentForm';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: liked,\n    1: setLiked\n  } = useState(false); // 좋아요 버튼의 상태\n\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // 댓글창 열기 버튼의 상태\n  //-------------------------------------------------------\n\n  const onToggleLike = useCallback(() => {\n    setLiked(prev => !prev);\n  }, []);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []); //-------------------------------------------------------\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  return __jsx(\"div\", {\n    style: {\n      marginBottom: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 42\n      }\n    }),\n    actions: [// 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n    __jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 27\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 27\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"comment\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }), __jsx(Popover, {\n      key: \"more\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 25\n        }\n      }, id && post.User.id === id ? __jsx(React.Fragment, null, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 29\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 31\n        }\n      }, \"\\uC2E0\\uACE0\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 21\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 25\n      }\n    }))],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 26\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  })), commentFormOpened && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }\n  }, __jsx(CommentForm, {\n    post: post\n    /* 게시글 아이디가 필요해서 넘겨줍니다  */\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }), __jsx(List, {\n    style: {\n      marginTop: 20\n    },\n    header: `${post.Comments.length}개의 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 25\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 38\n        }\n      }, \" \", item.User.nickname[0], \" \"),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 21\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    createdAt: PropTypes.object,\n    Comments: PropTypes.arrayOf(PropTypes.object),\n    Images: PropTypes.arrayOf(PropTypes.object)\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/haedod-i/Desktop/React-Nodebird/prepare/front/components/PostCard.js"],"names":["React","useState","useCallback","PropTypes","Button","Card","Popover","Avatar","List","Comment","HeartTwoTone","EllipsisOutlined","HeartOutlined","MessageOutlined","RetweetOutlined","useSelector","PostImages","CommentForm","PostCard","post","liked","setLiked","commentFormOpened","setCommentFormOpened","onToggleLike","prev","onToggleComment","id","state","user","me","marginBottom","Images","User","nickname","content","marginTop","Comments","length","item","propTypes","shape","number","object","string","createdAt","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React,{ useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Card, Popover, Avatar, List, Comment } from 'antd'\nimport { HeartTwoTone, EllipsisOutlined, HeartOutlined, MessageOutlined, RetweetOutlined } from '@ant-design/icons';\nimport { useSelector } from 'react-redux';\n\nimport PostImages from '../components/PostImages';\nimport CommentForm from '../components/CommentForm';\n\nconst PostCard = ({ post }) => {\n\n    const [liked, setLiked] = useState(false);// 좋아요 버튼의 상태\n    const [commentFormOpened, setCommentFormOpened] = useState(false); // 댓글창 열기 버튼의 상태\n    \n    //-------------------------------------------------------\n    \n    const onToggleLike = useCallback(() => { setLiked((prev) => !prev) }, []);\n\n    const onToggleComment = useCallback(() => { setCommentFormOpened((prev) => !prev) }, []);\n    \n    //-------------------------------------------------------\n    \n    const id = useSelector((state) => state.user.me?.id);\n    \n    return (\n        <div style={{ marginBottom: 20 }}>\n            <Card\n                cover={post.Images[0] && <PostImages images={post.Images} />}\n                actions={[ // 배열에 jsx 를 넣을 때는 항상 키가 필요합니다.\n                    <RetweetOutlined key=\"retweet\" />,\n                    \n                    liked \n                        ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} /> \n                        : <HeartOutlined key=\"heart\" onClick={onToggleLike} />,\n                    \n                    <MessageOutlined key=\"comment\" onClick={onToggleComment}/>,\n                    \n                    <Popover key=\"more\" content={(\n                        <Button.Group>\n                            { id && post.User.id === id ? (\n                            <>\n                            <Button>수정</Button>\n                            <Button type=\"danger\">삭제</Button>\n                            </>\n                            ):<Button>신고</Button> }\n                        </Button.Group>\n                    )}>\n                        <EllipsisOutlined />\n                    </Popover>,\n                ]}\n            >\n                <Card.Meta\n                avatar={ <Avatar>{ post.User.nickname[0] }</Avatar> }\n                title={ post.User.nickname }\n                description={ post.content }\n                />\n            </Card>\n            {commentFormOpened && (\n                <div>\n                    <CommentForm post={post/* 게시글 아이디가 필요해서 넘겨줍니다  */}/>\n                    <List \n                    style={{ marginTop: 20 }}\n                    header={ `${post.Comments.length}개의 댓글` }\n                    itemLayout=\"horizontal\"\n                    dataSource={ post.Comments }\n                    renderItem={(item) => (\n                        <li>\n                            <Comment \n                            author={ item.User.nickname }\n                            avatar={ <Avatar> { item.User.nickname[0] } </Avatar> }\n                            content={ item.content }\n                            />\n                        </li>\n                    )}\n                    />\n                </div>\n            )}\n            {/* <CommentForm /> */}\n            {/* <Comments /> */}\n        </div>\n    )\n};\n\nPostCard.propTypes = {\n    post: PropTypes.shape({\n        id: PropTypes.number,\n        User: PropTypes.object,\n        content: PropTypes.string,\n        createdAt: PropTypes.object,\n        Comments: PropTypes.arrayOf(PropTypes.object),\n        Images: PropTypes.arrayOf(PropTypes.object),\n    }).isRequired\n}\n\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}