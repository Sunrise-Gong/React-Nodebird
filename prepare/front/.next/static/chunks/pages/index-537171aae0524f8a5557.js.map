{"version":3,"sources":["webpack://_N_E/./components/PostForm.js","webpack://_N_E/./pages/index.js","webpack://_N_E/./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["PostForm","useSelector","state","post","imagePaths","addPostDone","dispatch","useDispatch","useInput","text","onChangeText","setText","useEffect","imageInput","useRef","onClickImageUpload","useCallback","current","click","onChangeImages","e","console","log","target","files","imageFormData","FormData","forEach","call","f","append","type","UPLOAD_IMAGES_REQUEST","data","onRemoveImage","index","REMOVE_IMAGE","onSubmit","trim","alert","formData","p","ADD_POST_REQUEST","style","margin","encType","onFinish","TextArea","value","onChange","maxLength","placeholder","marginBottom","name","multiple","hidden","ref","onClick","float","htmlType","map","v","i","key","display","src","width","alt","Home","me","user","mainPosts","hasMorePosts","loadPostsLoading","retweetError","onScroll","window","scrollY","document","documentElement","clientHeight","scrollHeight","lastId","length","id","LOAD_POSTS_REQUEST","addEventListener","removeEventListener","AppLayout","PostCard","__NEXT_P","push"],"mappings":"qSAsFeA,EAhFE,WACb,MAAoCC,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAzDC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YACdC,EAAWC,cACjB,EAAsCC,YAAS,IAA/C,mBAAOC,EAAP,KAAaC,EAAb,KAA2BC,EAA3B,KAGAC,qBAAU,WAAYP,GAAeM,EAAQ,MAAU,CAACN,IAGxD,IAAMQ,EAAaC,mBAEbC,EAAqBC,uBAAY,WAAQH,EAAWI,QAAQC,UAAY,CAACL,EAAWI,UAGpFE,EAAiBH,uBAAY,SAACI,GAChCC,QAAQC,IAAI,SAAUF,EAAEG,OAAOC,OAE/B,IAAMC,EAAgB,IAAIC,SAE1B,GAAGC,QAAQC,KAAKR,EAAEG,OAAOC,OAAO,SAACK,GAAQJ,EAAcK,OAAO,QAASD,MAEvEvB,EAAS,CAAEyB,KAAMC,IAAuBC,KAAMR,MAC/C,IAEGS,EAAgBlB,uBAAY,SAACmB,GAAD,OAAW,WACzC7B,EAAS,CACLyB,KAAMK,IACNH,KAAME,QAIRE,EAAWrB,uBAAY,WACzB,IAAKP,IAASA,EAAK6B,OAAU,OAAOC,MAAM,kEAE1C,IAAMC,EAAW,IAAId,SAMrB,OAJAtB,EAAWuB,SAAQ,SAACc,GAAQD,EAASV,OAAO,QAASW,MAErDD,EAASV,OAAO,UAAWrB,GAEpBH,EAAS,CAAEyB,KAAMW,IAAkBT,KAAMO,MACjD,CAAC/B,EAAML,IAEV,OACI,EAAC,IAAD,CACIuC,MAAO,CAAEC,OAAQ,gBACjBC,QAAQ,sBACRC,SAAUT,GAEV,EAAC,IAAMU,SAAP,CACIC,MAAOvC,EACPwC,SAAUvC,EACVwC,UAAW,IACXC,YAAY,2EAEhB,SAAKR,MAAO,CAAES,aAAc,KACxB,WAAOrB,KAAK,OAAOsB,KAAK,QAAQC,UAAQ,EAACC,QAAM,EAACC,IAAK3C,EAAYoC,SAAU9B,IAC3E,EAAC,IAAD,CAAQsC,QAAS1C,GAAjB,yCACA,EAAC,IAAD,CACIgB,KAAK,UACLY,MAAO,CAAEe,MAAO,SAChBC,SAAS,UAHb,iBAQJ,aACKvD,EAAWwD,KAAI,SAACC,EAAGC,GAAJ,OACZ,SAAKC,IAAKF,EAAGlB,MAAO,CAAEqB,QAAS,iBAC3B,SAAKC,IAAG,gCAA2BJ,GAAKlB,MAAO,CAAEuB,MAAO,SAAWC,IAAKN,IACxE,aACI,EAAC,IAAD,CAAQJ,QAASvB,EAAc4B,IAA/B,wB,qCCRbM,UAzDF,WACT,IAAM9D,EAAWC,cACT8D,EAAOpE,aAAY,SAACC,GAAD,OAAWA,EAAMoE,QAApCD,GACR,EAAoEpE,aAAY,SAACC,GAAD,OAAWA,EAAMC,QAAzFoE,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,aAAcC,EAAjC,EAAiCA,iBAAkBC,EAAnD,EAAmDA,aA2BnD,OAzBA9D,qBAAU,WAAY8D,GAAgBnC,MAAMmC,KAAoB,CAACA,IAOjE9D,qBAAU,WACN,SAAS+D,IAML,GAAIC,OAAOC,QAAUC,SAASC,gBAAgBC,aAAeF,SAASC,gBAAgBE,aAAe,KAC7FT,IAAiBC,EAAkB,OAC7BS,EAAM,UAAGX,EAAUA,EAAUY,OAAS,UAAhC,aAAG,EAAiCC,GAChD9E,EAAS,CAAEyB,KAAMsD,IAAoBH,YAKjD,OADAN,OAAOU,iBAAiB,SAAUX,GAC3B,WAAQC,OAAOW,oBAAoB,SAAUZ,MACrD,CAACH,EAAcC,EAAkBF,IAGhC,EAACiB,EAAA,EAAD,KACKnB,GAAM,EAAC,EAAD,MACNE,EAAUX,KAAI,SAACzD,GAAD,OAAU,EAACsF,EAAA,EAAD,CAAU1B,IAAK5D,EAAKiF,GAAIjF,KAAMA,OAF3D,O,sBC1CHyE,OAAOc,SAAWd,OAAOc,UAAY,IAAIC,KAAK,CAC7C,IACA,WACE,OAAO,EAAQ,a","file":"static/chunks/pages/index-537171aae0524f8a5557.js","sourcesContent":["import React, { useCallback, useRef, useEffect } from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';//액션\nimport useInput from '../hooks/useInput';\n\nconst PostForm = () => {\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\n    const dispatch = useDispatch();\n    const [text, onChangeText, setText] = useInput('');\n//------------------------------------------------ 작성한 글이 업로드 성공시 인풋창 비우기\n    \n    useEffect(() => { if (addPostDone) { setText(''); } }, [addPostDone]);\n\n//------------------------------------------------ 이미지 업로드 버튼 클릭\n    const imageInput = useRef();\n    \n    const onClickImageUpload = useCallback(() => { imageInput.current.click(); }, [imageInput.current]);\n\n//------------------------------------------------ 이미지 업로드 \n    const onChangeImages = useCallback((e) => {\n        console.log('images', e.target.files);\n        \n        const imageFormData = new FormData();\n        \n        [].forEach.call(e.target.files, (f) => { imageFormData.append('image', f); }); // e.target.files 가 유사 배열이여서 call 을 사용함\n        \n        dispatch({ type: UPLOAD_IMAGES_REQUEST, data: imageFormData });\n    }, []);\n\n    const onRemoveImage = useCallback((index) => () => {\n        dispatch({\n            type: REMOVE_IMAGE,\n            data: index,\n        });\n    });\n//------------------------------------------------ 게시글/이미지 등록버튼 클릭\n    const onSubmit = useCallback(() => {\n        if (!text || !text.trim()) { return alert('게시글을 작성해주세요.'); }\n        \n        const formData = new FormData();\n        \n        imagePaths.forEach((p) => { formData.append('image', p); });\n        \n        formData.append('content', text);\n        \n        return dispatch({ type: ADD_POST_REQUEST, data: formData });\n    }, [text, imagePaths]);\n\n    return (\n        <Form\n            style={{ margin: '10px 0 20 px' }}\n            encType=\"multipart/form-data\"\n            onFinish={onSubmit}>\n{/* --------------------------------------------- 게시글 작성창 */}\n            <Input.TextArea\n                value={text}\n                onChange={onChangeText}\n                maxLength={140}\n                placeholder=\"어떤 신기한 일이 있었나요?\" />\n{/* --------------------------------------------- 이미지 or 게시글 등록 버튼 */}\n            <div style={{ marginBottom: 20 }}>\n                <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages /* 이미지 선택후 확인을 누르면 실행됨 */} />\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n                <Button\n                    type=\"primary\"\n                    style={{ float: 'right' }}\n                    htmlType=\"submit\">\n                    짹짹\n                </Button>\n            </div>\n\n            <div>\n                {imagePaths.map((v, i) => ( // 이미지 업로드 미리보기 부분\n                    <div key={v} style={{ display: 'inline-block' }}>\n                        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\n                        <div>\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\n                        </div>\n                    </div>\n                    ))}\n            </div>\n        </Form>\n    );\n};\n\nexport default PostForm;","import React, { useEffect } from 'react'; //<-이거 안쓰면 eslint:recommended 설정에 걸림\nimport { useDispatch, useSelector } from 'react-redux';\nimport { END } from 'redux-saga';\n\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport wrapper from '../store/configureStore';\nimport axios from 'axios';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const { me } = useSelector((state) => state.user);\n    const { mainPosts, hasMorePosts, loadPostsLoading, retweetError } = useSelector((state) => state.post);\n    \n    useEffect(() => { if (retweetError) { alert(retweetError); } }, [retweetError]);\n\n    // useEffect(() => { \n    //     dispatch({ type: LOAD_POSTS_REQUEST }); \n    //     dispatch({ type: LOAD_USER_REQUEST }); \n    // }, []); // 첫 렌더링 후 실행\n\n    useEffect(() => {\n        function onScroll() {\n            // console.log( \n            //     window.scrollY, // 얼마나 내렸는지\n            //     document.documentElement.clientHeight, // 화면이 보이는 길이\n            //     document.documentElement.scrollHeight, // 총 세로 길이 \n            //     );\n            if (window.scrollY + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n                if (hasMorePosts && !loadPostsLoading) { \n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\n                    dispatch({ type: LOAD_POSTS_REQUEST, lastId });\n                }\n            }\n        }\n        window.addEventListener('scroll', onScroll);\n        return () => { window.removeEventListener('scroll', onScroll); }; // 이거 안하면 메모리에 쌓임\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n    return (\n        <AppLayout>\n            {me && <PostForm />}\n            {mainPosts.map((post) => <PostCard key={post.id} post={post} />)};\n        </AppLayout>\n    );\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n    console.log('getServerSideProps 시작');\n    console.log('헤더', context.req.headers);\n    \n    const cookie = context.req ? context.req.headers.cookie : '';\n    \n    axios.defaults.headers.Cookie = '';\n    if (context.req && cookie) { axios.defaults.headers.Cookie = cookie; }\n    \n    context.store.dispatch({ type: LOAD_POSTS_REQUEST });\n    \n    context.store.dispatch({ type: LOAD_MY_INFO_REQUEST }); \n    \n    context.store.dispatch(END);\n    console.log('getServerSideProps 끝');\n\n    await context.store.sagaTask.toPromise();\n});\n\nexport default Home;","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.js\");\n      }\n    ]);\n  "],"sourceRoot":""}